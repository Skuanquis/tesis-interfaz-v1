<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted, watch } from 'vue';
import {
    obtenerCasosClinicos,
    cambiarEstadoCaso,
    obtenerCasoClinicoPorId,
    obtenerPaciente,
    obtenerPuntaje,
    obtenerCategoriasImagenologia,
    obtenerImagenesPorHistoriaClinica,
    actualizarImagenes,
    cargarImagen

} from '../services/casoService';
import { useToast } from 'primevue/usetoast';

const toast = useToast();
const casosClinicos = ref([]);
const visible = ref(false);
const casoSeleccionado = ref(null);
const paciente = ref({});

const scoreImagenologia = ref([]);

const categoriasImagenologia = ref([]);
const categoriasSeleccionadas = ref([]);
const imagenesData = ref([]);

const cerrarDialogo = () => {
    visible.value = false;
    localStorage.removeItem('id_historia_clinica');
};

const cargarCasosClinicos = async () => {
    try {
        const response = await obtenerCasosClinicos();
        casosClinicos.value = response.data;
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'Error al obtener los casos clínicos',
            life: 3000
        });
    }
};

const toggleEstadoCaso = async (caso) => {
    try {
        const nuevoEstado = caso.estado === 'habilitado' ? 'deshabilitado' : 'habilitado';
        await cambiarEstadoCaso(caso.id_caso_clinico, nuevoEstado);
        caso.estado = nuevoEstado;
        toast.add({
            severity: caso.estado === 'habilitado' ? 'success' : 'warn',
            summary: 'Éxito',
            detail: `Se ha ${nuevoEstado} el caso clínico N°${caso.id_caso_clinico}`,
            life: 3000
        });
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'No se pudo cambiar el estado del caso clínico',
            life: 3000
        });
    }
};

const getDificultadSeverity = (dificultad) => {
    switch (dificultad.toLowerCase()) {
        case 'principiante':
            return 'success';
        case 'intermedio':
            return 'warning';
        case 'avanzado':
            return 'danger';
        default:
            return 'info';
    }
};

const cargarDatosPaciente = async (id_historia_clinica) => {
    try {
        const response = await obtenerPaciente(id_historia_clinica);
        const data = response.data[0];
        if (data.fecha_nacimiento) {
            const fecha = new Date(data.fecha_nacimiento);
            data.fecha_nacimiento = fecha.toLocaleDateString('es-ES', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }
        paciente.value = data;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener datos del paciente', life: 3000 });
    }
};

const mostrarDetalleCaso = async (idCaso) => {
    try {
        const response = await obtenerCasoClinicoPorId(idCaso);
        casoSeleccionado.value = response.data;

        await cargarDatosPaciente(casoSeleccionado.value.id_historia_clinica);
        await cargarPuntaje(casoSeleccionado.value.id_historia_clinica);
        await cargarCategoriasImagenologia();
        await cargarImagenes(casoSeleccionado.value.id_historia_clinica);
        visible.value = true;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener el caso clínico', life: 3000 });
    }
};

const cargarPuntaje = async (id_historia_clinica) => {
    try {
        const response = await obtenerPuntaje(id_historia_clinica);
        scoreImagenologia.value = response.data.map(item => ({
            name: `${item.codigo}: ${item.valor}`, value: item.codigo
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener puntajes', life: 3000 });
    }
};


const cargarCategoriasImagenologia = async () => {
    try {
        const response = await obtenerCategoriasImagenologia();
        categoriasImagenologia.value = response.data.map(cat => ({
            id_categoria_imagenologia: cat.id_categoria_imagenologia,
            nombre: cat.nombre,
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener categorías de imagenología', life: 3000 });
    }
};

const cargarImagenes = async (id_historia_clinica) => {
    try {
        const response = await obtenerImagenesPorHistoriaClinica(id_historia_clinica);
        const imagenes = response.data;
        const backendBaseUrl = '';
        imagenes.forEach(img => {
            if (img.path) {
                img.path = backendBaseUrl + img.path;
            }
        });

        imagenesData.value = imagenes;
        categoriasSeleccionadas.value = [...new Set(imagenes.map(img => img.id_categoria_imagenologia))];
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener imágenes', life: 3000 });
    }
};

watch(categoriasSeleccionadas, (newVal, oldVal) => {
    const addedCategorias = newVal.filter(id => !oldVal.includes(id));
    const removedCategorias = oldVal.filter(id => !newVal.includes(id));

    addedCategorias.forEach(id_categoria => {
        const categoria = categoriasImagenologia.value.find(cat => cat.id_categoria_imagenologia === id_categoria);
        if (categoria) {
            const exists = imagenesData.value.some(img => img.id_categoria_imagenologia === id_categoria);
            if (!exists) {
                imagenesData.value.push({
                    id_imagenologia: null,
                    id_categoria_imagenologia: id_categoria,
                    categoria_nombre: categoria.nombre,
                    interpretacion: '',
                    path: '',
                    feed_imagenologia: '',
                    puntaje_imagenologia: ''
                });
            }
        }
    });

    removedCategorias.forEach(id_categoria => {
        const index = imagenesData.value.findIndex(img => img.id_categoria_imagenologia === id_categoria);
        if (index !== -1) {
            imagenesData.value.splice(index, 1);
        }
    });
});


const onUpload = async (event, index) => {
    const file = event.files[0];
    const formData = new FormData();
    formData.append('imagen', file);

    try {
        const response = await cargarImagen(formData);
        const backendBaseUrl = 'http://localhost:3000'; // Ajusta según tu configuración
        // Actualizar la ruta de la imagen en imagenesData
        imagenesData.value[index].path = backendBaseUrl + response.data.path;
        imagenesData.value[index].path = response.data.path;
        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Imagen cargada correctamente', life: 3000 });
    } catch (error) {
        console.log(error);
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar la imagen', life: 3000 });
    }
};

const guardarImagenes = async () => {
    try {
        await actualizarImagenes(casoSeleccionado.value.id_historia_clinica, imagenesData.value);
        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Imágenes actualizadas correctamente', life: 3000 });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al actualizar las imágenes', life: 3000 });
    }
};


onMounted(() => {
    cargarCasosClinicos();
});
</script>




<template>
    <div class="grid">
        <div v-for="caso in casosClinicos" :key="caso.id_caso_clinico" class="col md:col-4">
            <Card style="overflow: hidden">
                <template #title>Caso N° {{ caso.id_caso_clinico }}</template>
                <template #subtitle>Autor: {{ caso.autor }}</template>
                <template #content>
                    <div class="grid">
                        <div class="col md:col-12 capitalize"><strong>Nombre: </strong>{{ caso.nombre }} {{ caso.paterno
                            }} {{
                                caso.materno }}</div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-4"><strong>Peso: </strong>{{ caso.peso }} kg</div>
                        <div class="col md:col-4"><strong>Talla: </strong>{{ caso.talla }} m</div>
                        <div class="col md:col-4 capitalize"><strong>Sexo: </strong>{{ caso.sexo }}</div>
                    </div>
                    <p class="m-0 text-justify">
                        {{ caso.descripcion }}
                    </p>
                    <div class="grid pt-2">
                        <div class="col md:col-12"><strong>Categoría: </strong>
                            <Tag :value="caso.categoria" severity="info" />
                        </div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-12"><strong>Dificultad: </strong>
                            <Tag :value="caso.difucultad" :severity="getDificultadSeverity(caso.difucultad)" />
                        </div>
                    </div>
                </template>
                <template #footer>
                    <div class="flex gap-3 mt-1">
                        <Button :label="caso.estado === 'deshabilitado' ? 'Habilitar' : 'Deshabilitar'"
                            @click="toggleEstadoCaso(caso)"
                            :severity="caso.estado === 'deshabilitado' ? 'contrast' : 'danger'" class="w-full" />
                        <Button label="Ver" class="w-full" @click="mostrarDetalleCaso(caso.id_caso_clinico)" />
                    </div>
                </template>
            </Card>
        </div>
        <Dialog v-model:visible="visible" modal header="Ver caso clínico" :style="{ width: '65rem' }">
            <div class="justify-content-center">
                <Stepper linear orientation="vertical">
                    <StepperPanel header="Imagenología">
                        <template #content="{ prevCallback, nextCallback }">
                            <h5>Selecciona las categorías de imagenología para el caso</h5>
                            <div class="card flex justify-content-center">
                                <SelectButton v-model="categoriasSeleccionadas" :options="categoriasImagenologia"
                                    optionLabel="nombre" optionValue="id_categoria_imagenologia" multiple
                                    aria-labelledby="multiple" />
                            </div>

                            <!-- Mostrar imágenes por categoría seleccionada -->
                            <div v-for="(imgData, index) in imagenesData" :key="imgData.id_categoria_imagenologia"
                                class="mt-4">
                                <h5>{{ imgData.categoria_nombre }}</h5>
                                <div class="grid p-fluid    x">
                                    <div class="col md:col-5">
                                        <FileUpload name="imagen" accept="image/*" :auto="true" :customUpload="true"
                                            :maxFileSize="1000000" chooseLabel="Elegir Imagen" :showCancelButton="false"
                                            :showUploadButton="false" @select="(event) => onUpload(event, index)">
                                            <template #content>
                                                <div v-if="imgData.path">
                                                    <img :src="imgData.path" alt="Imagen" width="200" />
                                                </div>
                                                <div v-else>
                                                    <p>Elige y arrastra una imagen.</p>
                                                </div>
                                            </template>
                                        </FileUpload>
                                    </div>
                                    <div class="col md:col-4">
                                        <div class="grid">
                                            <div class="col md:col-12">
                                                <FloatLabel>
                                                    <Textarea v-model="imgData.interpretacion" autoResize rows="3"
                                                        cols="30" />
                                                    <label for="interpretacion">Interpretación</label>
                                                </FloatLabel>
                                            </div>
                                            <div class="col md:col-12 pt-3">
                                                <FloatLabel>
                                                    <Textarea v-model="imgData.feed_imagenologia" autoResize rows="3"
                                                        cols="30" />
                                                    <label for="interpretacion">Retroalimentación</label>
                                                </FloatLabel>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="col md:col-3">
                                        <FloatLabel>
                                            <Dropdown v-model="imgData.puntaje_imagenologia"
                                                :options="scoreImagenologia" optionLabel="name" optionValue="value"
                                                placeholder="Elige una opción" checkmark :highlightOnSelect="false"
                                                class="w-full md:w-14rem" />
                                            <label for="puntaje_imagenologia">Puntaje Asignado</label>
                                        </FloatLabel>
                                    </div>
                                </div>
                            </div>

                            <div class="flex py-4 gap-2">
                                <Button label="Atrás" severity="secondary" icon="pi pi-arrow-left"
                                    @click="prevCallback" />
                                <Button label="Guardar" @click="guardarImagenes" severity="success" icon="pi pi-save" />
                                <Button label="Siguiente" icon="pi pi-arrow-right" iconPos="right"
                                    @click="nextCallback" />
                            </div>
                        </template>
                    </StepperPanel>
                </Stepper>

                <div class="flex justify-content-end gap-2">
                    <Button type="button" label="Cancel" severity="secondary" @click=cerrarDialogo></Button>
                    <Button label="Guardar" @click="guardarSubespecialidades" severity="success" icon="pi pi-save" />
                    <Button type=" button" label="Guardar" @click="visible = false"></Button>
                </div>
            </div>
        </Dialog>
    </div>
</template>







<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted } from 'vue';
import {
    obtenerDiagnosticosDiferencialesPorCategoria, eliminarDiagnostico, agregarDiagnostico,
    actualizarDiagnostico, agregarCategoriaConDiagnosticos,

} from '@/services/configuracionService';
import { useToast } from 'primevue/usetoast';
import FloatLabel from 'primevue/floatlabel';

const toast = useToast();
const diagnosticosPorCategoria = ref({});
const Medicamento = ref(false);
const nuevaCategoria = ref({
    categoria: '',
    diagnosticos: [{ nombre: '' }]
});

const eliminarRegistro = async (id_diagnostico) => {
    try {
        await eliminarDiagnostico(id_diagnostico);
        for (const categoria in diagnosticosPorCategoria.value) {
            const categoriaData = diagnosticosPorCategoria.value[categoria];
            categoriaData.diagnosticos = categoriaData.diagnosticos.filter(d => d.id_diagnostico !== id_diagnostico);
        }
        toast.add({ severity: "success", summary: 'Éxito', detail: `Se eliminó el diagnóstico diferencial`, life: 3000 });
    } catch (error) {
        console.error("Error al eliminar diagnóstico", error);
        const errorMsg = error.response?.data?.error || 'No se pudo eliminar el diagnóstico diferencial';
        toast.add({ severity: "error", summary: 'Error', detail: errorMsg, life: 3000 });
    }
};


const agregarNuevoCampo = (categoria) => {
    const categoriaData = diagnosticosPorCategoria.value[categoria];
    if (!categoriaData.diagnosticos) {
        categoriaData.diagnosticos = [];
    }
    categoriaData.diagnosticos.push({ id_diagnostico: null, diagnostico: '' });
    toast.add({ severity: "info", summary: 'Nuevo', detail: `Campo agregado para nueva entrada de diagnóstico en ${categoria}`, life: 3000 });
};

const guardarCambios = async () => {
    try {
        for (const categoria in diagnosticosPorCategoria.value) {
            const categoriaData = diagnosticosPorCategoria.value[categoria];
            const id_categoria_diferencial = categoriaData.id_categoria_diferencial;
            const diagnosticos = categoriaData.diagnosticos;

            for (const diagnostico of diagnosticos) {
                console.log("Datos enviados para actualizar o agregar:", diagnostico);

                if (!diagnostico.diagnostico || diagnostico.diagnostico.trim() === "") {
                    console.warn("El diagnóstico está vacío, no se procesará.");
                    continue;
                }

                if (diagnostico.id_diagnostico) {
                    // Actualizar diagnóstico existente
                    await actualizarDiagnostico(diagnostico.id_diagnostico, { diagnostico: diagnostico.diagnostico });
                } else {
                    // Agregar nuevo diagnóstico y actualizar el id_diagnostico en el estado local
                    const response = await agregarDiagnostico({ id_categoria_diferencial, diagnostico: diagnostico.diagnostico });
                    diagnostico.id_diagnostico = response.data.id; // Actualizar el ID en el estado local
                }
            }
        }

        toast.add({ severity: "success", summary: 'Éxito', detail: `Se guardaron los cambios correctamente`, life: 3000 });
    } catch (error) {
        console.error("Error al guardar cambios", error);
        toast.add({ severity: "error", summary: 'Error', detail: `No se pudieron guardar los cambios`, life: 3000 });
    }
};

const abrirDialogoCategoria = () => {
    nuevaCategoria.value = {
        categoria: '',
        diagnosticos: [{ nombre: '' }]
    };
    Medicamento.value = true;
};

const agregarDiagnosticoEnDialogo = () => {
    nuevaCategoria.value.diagnosticos.push({ nombre: '' });
};

const eliminarDiagnosticoEnDialogo = (index) => {
    if (nuevaCategoria.value.diagnosticos.length > 1) {
        nuevaCategoria.value.diagnosticos.splice(index, 1);
    } else {
        toast.add({ severity: "warn", summary: 'Advertencia', detail: 'Debe tener al menos un diagnóstico', life: 3000 });
    }
};

const guardarNuevaCategoria = async () => {
    try {
        const diagnosticosNombres = nuevaCategoria.value.diagnosticos.map(d => d.nombre.trim()).filter(n => n !== '');
        if (!nuevaCategoria.value.categoria.trim()) {
            toast.add({ severity: "warn", summary: 'Advertencia', detail: 'El nombre de la categoría es requerido', life: 3000 });
            return;
        }
        if (diagnosticosNombres.length === 0) {
            toast.add({ severity: "warn", summary: 'Advertencia', detail: 'Debe proporcionar al menos un diagnóstico válido', life: 3000 });
            return;
        }
        const data = {
            categoria: nuevaCategoria.value.categoria.trim(),
            diagnosticos: diagnosticosNombres
        };
        const response = await agregarCategoriaConDiagnosticos(data);
        const id_categoria_diferencial = response.data.id_categoria_diferencial;
        diagnosticosPorCategoria.value[nuevaCategoria.value.categoria.trim()] = {
            id_categoria_diferencial,
            diagnosticos: diagnosticosNombres.map((nombre, index) => ({
                id_diagnostico: response.data.ids_diagnosticos[index],
                diagnostico: nombre
            }))
        };

        Medicamento.value = false;
        toast.add({ severity: "success", summary: 'Éxito', detail: 'Categoría y diagnósticos agregados correctamente', life: 3000 });
    } catch (error) {
        console.error("Error al agregar categoría y diagnósticos", error);
        const errorMsg = error.response?.data?.error || 'No se pudo agregar la categoría y diagnósticos';
        toast.add({ severity: "error", summary: 'Error', detail: errorMsg, life: 3000 });
    }
};

onMounted(async () => {
    try {
        const response = await obtenerDiagnosticosDiferencialesPorCategoria();
        diagnosticosPorCategoria.value = response.data;
    } catch (error) {
        console.error("Error al obtener los diagnósticos por categoría", error);
        toast.add({ severity: "error", summary: 'Error', detail: `No se pudo cargar los diagnósticos diferenciales`, life: 3000 });
    }
});



</script>

<template>
    <div class="card flex justify-content-center">
        <Stepper>
            <StepperPanel header="Diagnósticos Diferenciales">
                <template #content="{ nextCallback }">
                    <Accordion :activeIndex="0">
                        <!-- Iterar sobre las categorías para crear una pestaña por cada categoría -->
                        <AccordionTab v-for="(categoriaData, categoria) in diagnosticosPorCategoria" :key="categoria"
                            :header="categoria">
                            <div class="grid p-fluid">
                                <!-- Iterar sobre los diagnósticos dentro de cada categoría -->
                                <div v-for="(diagnostico, index) in categoriaData.diagnosticos" :key="index"
                                    class="col-12">
                                    <div class="grid">
                                        <div class="col md:col-10">
                                            <InputText v-model="diagnostico.diagnostico" />
                                        </div>
                                        <div class="col md:col-2 text-center">
                                            <Button icon="pi pi-times" severity="danger" text raised rounded
                                                aria-label="Eliminar"
                                                @click="eliminarRegistro(diagnostico.id_diagnostico)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 text-center">
                                    <Button icon="pi pi-plus" text raised rounded aria-label="Agregar"
                                        @click="agregarNuevoCampo(categoria)" />
                                </div>
                            </div>
                        </AccordionTab>
                    </Accordion>

                    <!-- Dialog para añadir nueva categoría -->
                    <Dialog v-model:visible="Medicamento" modal header="Añadir Categoría" :style="{ width: '25rem' }"
                        class="p-fluid">
                        <div>
                            <FloatLabel>
                                <InputText id="categoria" v-model="nuevaCategoria.categoria" autocomplete="off" />
                                <Label for="categoria">Categoría</Label>
                            </FloatLabel>
                        </div>
                        <h6>Diagnósticos</h6>
                        <div v-for="(diagnostico, index) in nuevaCategoria.diagnosticos" :key="index"
                            class="grid align-items-center">
                            <div class="col md:col-10">
                                <InputText v-model="diagnostico.nombre" autocomplete="off" />
                            </div>
                            <div class="col md:col-2">
                                <Button icon="pi pi-times" severity="danger" text raised rounded aria-label="Eliminar"
                                    @click="eliminarDiagnosticoEnDialogo(index)" />
                            </div>
                        </div>
                        <div class="col-12 text-center">
                            <Button icon="pi pi-plus" text raised rounded aria-label="Agregar Diagnóstico"
                                @click="agregarDiagnosticoEnDialogo" />
                        </div>
                        <div class="col-12 text-center" style="margin-top: 1rem;">
                            <Button label="Guardar" icon="pi pi-save" text raised @click="guardarNuevaCategoria" />
                        </div>
                    </Dialog>

                    <!-- Botones para Guardar cambios y Añadir categoría -->
                    <div class="col-12 p-3" style="margin-top: 2rem;">
                        <div class="grid  align-items-center justify-content-center">
                            <div class="px-2 w-15rem m-3 border-round">
                                <Button label="Guardar Cambios" icon="pi pi-save" severity="success" raised
                                    @click="guardarCambios" />
                            </div>
                            <div class="px-2 w-15rem m-3 border-round">
                                <Button label="Añadir Categoría" icon="pi pi-plus" severity="help" raised
                                    @click="abrirDialogoCategoria" />
                            </div>
                        </div>
                    </div>

                    <!-- Botón para pasar al siguiente paso del Stepper -->
                    <div class="flex py-4 gap-2">
                        <Button label="Siguiente" icon="pi pi-arrow-right" iconPos="right" @click="nextCallback" />
                    </div>
                </template>
            </StepperPanel>
        </Stepper>
    </div>
</template>
