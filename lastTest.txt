<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted, reactive } from 'vue';
import {
    obtenerCasosClinicos, cambiarEstadoCaso,
    obtenerCasoClinicoPorId,
    obtenerPaciente,
    obtenerPuntaje,
    obtenerCategoriasConImagenologias, obtenerEstudiosImagenologiaPorHistoriaClinica,
    actualizarEstudiosImagenologia, cargarImagenCategoria,
} from '../services/casoService';
import { useToast } from 'primevue/usetoast';

const toast = useToast();
const casosClinicos = ref([]);
const visible = ref(false);
const casoSeleccionado = ref(null);

const paciente = ref({});
const scoreImagenologia = ref([]);
const categoriasImagenologia = ref([]);
const imagenesData = ref([]); // Almacena estudios de imagenología

// Objeto reactivo para almacenar las imagenologías seleccionadas por categoría
const selectedImagenologiasByCategory = reactive({});

const cerrarDialogo = () => {
    visible.value = false;
    localStorage.removeItem('id_historia_clinica');
    // Limpiar las selecciones
    Object.keys(selectedImagenologiasByCategory).forEach(key => {
        selectedImagenologiasByCategory[key] = [];
    });
    imagenesData.value = [];
}

const cargarCasosClinicos = async () => {
    try {
        const response = await obtenerCasosClinicos();
        casosClinicos.value = response.data;
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'Error al obtener los casos clínicos',
            life: 3000
        });
    }
};

const toggleEstadoCaso = async (caso) => {
    try {
        const nuevoEstado = caso.estado === 'habilitado' ? 'deshabilitado' : 'habilitado';
        await cambiarEstadoCaso(caso.id_caso_clinico, nuevoEstado);
        caso.estado = nuevoEstado;
        toast.add({
            severity: caso.estado === 'habilitado' ? 'success' : 'warn',
            summary: 'Éxito',
            detail: `Se ha ${nuevoEstado} el caso clínico N°${caso.id_caso_clinico}`,
            life: 3000
        });
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'No se pudo cambiar el estado del caso clínico',
            life: 3000
        });
    }
};

const getDificultadSeverity = (dificultad) => {
    switch (dificultad.toLowerCase()) {
        case 'principiante':
            return 'success';
        case 'intermedio':
            return 'warning';
        case 'avanzado':
            return 'danger';
        default:
            return 'info';
    }
};

const cargarDatosPaciente = async (id_historia_clinica) => {
    try {
        const response = await obtenerPaciente(id_historia_clinica);
        const data = response.data[0];
        paciente.value = data;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener datos del paciente', life: 3000 });
    }
};

const cargarPuntaje = async (id_historia_clinica) => {
    try {
        const response = await obtenerPuntaje(id_historia_clinica);
        scoreImagenologia.value = response.data.map(item => ({
            name: `${item.codigo}: ${item.valor}`, value: item.codigo
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener puntajes', life: 3000 });
    }
};

const cargarCategoriasImagenologia = async () => {
    try {
        const response = await obtenerCategoriasConImagenologias();
        categoriasImagenologia.value = response.data; // Ya estructurado con imagenologías

        // Inicializar las selecciones por categoría
        categoriasImagenologia.value.forEach(category => {
            if (!selectedImagenologiasByCategory[category.id_categoria_imagenologia]) {
                selectedImagenologiasByCategory[category.id_categoria_imagenologia] = [];
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener categorías de imagenología', life: 3000 });
    }
};

const mostrarDetalleCaso = async (idCaso) => {
    try {
        const response = await obtenerCasoClinicoPorId(idCaso);
        casoSeleccionado.value = response.data;
        await cargarDatosPaciente(casoSeleccionado.value.id_historia_clinica);
        await cargarPuntaje(casoSeleccionado.value.id_historia_clinica);
        await cargarCategoriasImagenologia();
        await cargarEstudiosImagenes(casoSeleccionado.value.id_historia_clinica);
        visible.value = true;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener el caso clínico', life: 3000 });
    }
};

const cargarEstudiosImagenes = async (id_historia_clinica) => {
    try {
        const response = await obtenerEstudiosImagenologiaPorHistoriaClinica(id_historia_clinica);
        const estudios = response.data;
        imagenesData.value = estudios.map(estudio => ({
            id_estudios_imagenologia: estudio.id_estudios_imagenologia,
            id_imagenologia: estudio.id_imagenologia,
            nombre: estudio.imagenologia_nombre,
            categoria_nombre: estudio.categoria_nombre,
            interpretacion: estudio.interpretacion,
            path: estudio.path,
            feed_estudios_imagenologia: estudio.feed_estudios_imagenologia,
            puntaje_estudios_imagenologia: estudio.puntaje_estudios_imagenologia
        }));

        // Mapear las imagenologías seleccionadas por categoría
        estudios.forEach(estudio => {
            const categoryId = categoriasImagenologia.value.find(category => category.nombre === estudio.categoria_nombre)?.id_categoria_imagenologia;
            if (categoryId) {
                if (!selectedImagenologiasByCategory[categoryId]) {
                    selectedImagenologiasByCategory[categoryId] = [];
                }
                if (!selectedImagenologiasByCategory[categoryId].includes(estudio.id_imagenologia)) {
                    selectedImagenologiasByCategory[categoryId].push(estudio.id_imagenologia);
                }
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener estudios de imagenología', life: 3000 });
    }
};

// eslint-disable-next-line no-unused-vars
const onImagenologiaSelectionChange = (categoryId) => {
    // Obtener todas las imagenologías seleccionadas
    const selectedIds = Object.values(selectedImagenologiasByCategory).flat();

    // Obtener los IDs previamente seleccionados
    const previousIds = imagenesData.value.map(img => img.id_imagenologia);

    const addedIds = selectedIds.filter(id => !previousIds.includes(id));
    const removedIds = previousIds.filter(id => !selectedIds.includes(id));

    // Agregar nuevas imagenologías a imagenesData
    addedIds.forEach(id_imagenologia => {
        const imagenologia = categoriasImagenologia.value.flatMap(cat => cat.imagenologias)
            .find(img => img.id_imagenologia === id_imagenologia);
        if (imagenologia) {
            const category = categoriasImagenologia.value.find(cat => cat.imagenologias.some(img => img.id_imagenologia === id_imagenologia));
            imagenesData.value.push({
                id_estudios_imagenologia: null,
                id_imagenologia: id_imagenologia,
                nombre: imagenologia.nombre,
                categoria_nombre: category.nombre,
                interpretacion: '',
                path: '',
                feed_estudios_imagenologia: '',
                puntaje_estudios_imagenologia: ''
            });
        }
    });

    // Eliminar imagenologías de imagenesData
    removedIds.forEach(id_imagenologia => {
        const index = imagenesData.value.findIndex(img => img.id_imagenologia === id_imagenologia);
        if (index !== -1) {
            imagenesData.value.splice(index, 1);
        }
    });
};

const onUpload = async (event, index) => {
    const file = event.files[0];
    const formData = new FormData();
    formData.append('imagen', file);
    formData.append('id_imagenologia', imagenesData.value[index].id_imagenologia);

    try {
        const response = await cargarImagenCategoria(formData);
        imagenesData.value[index].path = response.data.path;
        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Imagen cargada correctamente', life: 3000 });
    } catch (error) {
        console.log(error);
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar la imagen', life: 3000 });
    }
};

const guardarTodosLosCambiosImagenologia = async () => {
    try {
        await actualizarEstudiosImagenologia(casoSeleccionado.value.id_historia_clinica, imagenesData.value);
        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Estudios de imagenología actualizados correctamente', life: 3000 });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al actualizar los estudios de imagenología', life: 3000 });
    }
};

onMounted(() => {
    cargarCasosClinicos();
});
</script>

<template>
    <div class="grid">
        <div v-for="caso in casosClinicos" :key="caso.id_caso_clinico" class="col md:col-4">
            <Card style="overflow: hidden">
                <template #title>Caso N° {{ caso.id_caso_clinico }}</template>
                <template #subtitle>Autor: {{ caso.autor }}</template>
                <template #content>
                    <div class="grid">
                        <div class="col md:col-12 capitalize"><strong>Nombre: </strong>{{ caso.nombre }} {{ caso.paterno
                            }} {{
                                caso.materno }}</div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-4"><strong>Peso: </strong>{{ caso.peso }} kg</div>
                        <div class="col md:col-4"><strong>Talla: </strong>{{ caso.talla }} m</div>
                        <div class="col md:col-4 capitalize"><strong>Sexo: </strong>{{ caso.sexo }}</div>
                    </div>
                    <p class="m-0 text-justify">
                        {{ caso.descripcion }}
                    </p>
                    <div class="grid pt-2">
                        <div class="col md:col-12"><strong>Categoría: </strong>
                            <Tag :value="caso.categoria" severity="info" />
                        </div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-12"><strong>Dificultad: </strong>
                            <Tag :value="caso.difucultad" :severity="getDificultadSeverity(caso.difucultad)" />
                        </div>
                    </div>
                </template>
                <template #footer>
                    <div class="flex gap-3 mt-1">
                        <Button :label="caso.estado === 'deshabilitado' ? 'Habilitar' : 'Deshabilitar'"
                            @click="toggleEstadoCaso(caso)"
                            :severity="caso.estado === 'deshabilitado' ? 'contrast' : 'danger'" class="w-full" />
                        <Button label="Ver" class="w-full" @click="mostrarDetalleCaso(caso.id_caso_clinico)" />
                    </div>
                </template>
            </Card>
        </div>
        <Dialog v-model:visible="visible" modal header="Ver caso clínico" :style="{ width: '65rem' }">
            <div class="justify-content-center">
                <h5>Selecciona las imagenologías para el caso</h5>
                <!-- Mostrar categorías y sus imagenologías con SelectButton -->
                <div v-for="category in categoriasImagenologia" :key="category.id_categoria_imagenologia" class="mt-4">
                    <h5>{{ category.nombre }}</h5>
                    <div class="text-center">
                        <SelectButton v-model="selectedImagenologiasByCategory[category.id_categoria_imagenologia]"
                            :options="category.imagenologias" optionLabel="nombre" optionValue="id_imagenologia"
                            multiple @change="onImagenologiaSelectionChange(category.id_categoria_imagenologia)" />
                    </div>
                </div>

                <!-- Mostrar estudios de imagenología -->
                <div v-for="(imgData, index) in imagenesData" :key="imgData.id_imagenologia" class="mt-4">
                    <h5>{{ imgData.categoria_nombre }} - {{ imgData.nombre }}</h5>
                    <div class="grid p-fluid">
                        <div class="col md:col-5">
                            <FileUpload name="imagen" accept="image/*" :auto="true" :customUpload="true"
                                :maxFileSize="1000000" chooseLabel="Elegir Imagen" :showCancelButton="false"
                                :showUploadButton="false" @select="(event) => onUpload(event, index)">
                                <template #content>
                                    <div v-if="imgData.path">
                                        <img :src="imgData.path" alt="Imagen" width="200" />
                                    </div>
                                    <div v-else>
                                        <p>Elige y arrastra una imagen.</p>
                                    </div>
                                </template>
                            </FileUpload>
                        </div>
                        <div class="col md:col-4">
                            <div class="grid">
                                <div class="col md:col-12">
                                    <FloatLabel>
                                        <Textarea v-model="imgData.interpretacion" autoResize rows="3" cols="30" />
                                        <label for="interpretacion">Interpretación</label>
                                    </FloatLabel>
                                </div>
                                <div class="col md:col-12 pt-3">
                                    <FloatLabel>
                                        <Textarea v-model="imgData.feed_estudios_imagenologia" autoResize rows="3"
                                            cols="30" />
                                        <label for="feed_estudios_imagenologia">Retroalimentación</label>
                                    </FloatLabel>
                                </div>
                            </div>
                        </div>
                        <div class="col md:col-3">
                            <FloatLabel>
                                <Dropdown v-model="imgData.puntaje_estudios_imagenologia" :options="scoreImagenologia"
                                    optionLabel="name" optionValue="value" placeholder="Elige una opción" checkmark
                                    :highlightOnSelect="false" class="w-full md:w-14rem" />
                                <label for="puntaje_estudios_imagenologia">Puntaje Asignado</label>
                            </FloatLabel>
                        </div>
                    </div>
                </div>

                <div class="flex py-4 gap-2">
                    <!-- Botones de navegación si los tienes -->
                    <Button label="Guardar" @click="guardarTodosLosCambiosImagenologia" />
                </div>

                <div class="flex justify-content-end gap-2">
                    <Button type="button" label="Cancelar" severity="secondary" @click=cerrarDialogo></Button>
                    <Button type="button" label="Guardar" @click="guardarTodosLosCambiosImagenologia"></Button>
                </div>
            </div>
        </Dialog>
    </div>
</template>





























<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted, computed, watchEffect } from 'vue';
import {
    obtenerCasosClinicos, cambiarEstadoCaso,
    obtenerCasoClinicoPorId,
    obtenerPaciente,
    obtenerPuntaje,
    obtenerCategoriasProcedimientos, obtenerProcedimientosPorCategoria,
    obtenerProcedimientosAsignadosPorHistoriaClinica, actualizarProcedimientosAsignados,

} from '../services/casoService';
import { useToast } from 'primevue/usetoast';

const toast = useToast();
const casosClinicos = ref([]);
const visible = ref(false);
const casoSeleccionado = ref(null);

const paciente = ref({});

const scoreProcedimientos = ref([]);
const categoriasProcedimientos = ref([]);
const procedimientosPorCategoria = ref({});
const selectedProcedimientosPorCategoria = ref({});
const procedimientoDetails = ref({});
const procedimientosMap = ref({});

const cerrarDialogo = () => {
    visible.value = false;
    localStorage.removeItem('id_historia_clinica');

}

const cargarCasosClinicos = async () => {
    try {
        const response = await obtenerCasosClinicos();
        casosClinicos.value = response.data;
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'Error al obtener los casos clínicos',
            life: 3000
        });
    }
};

const toggleEstadoCaso = async (caso) => {
    try {
        const nuevoEstado = caso.estado === 'habilitado' ? 'deshabilitado' : 'habilitado';
        await cambiarEstadoCaso(caso.id_caso_clinico, nuevoEstado);
        caso.estado = nuevoEstado;
        toast.add({
            severity: caso.estado === 'habilitado' ? 'success' : 'warn',
            summary: 'Éxito',
            detail: `Se ha ${nuevoEstado} el caso clínico N°${caso.id_caso_clinico}`,
            life: 3000
        });
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'No se pudo cambiar el estado del caso clínico',
            life: 3000
        });
    }
};

const getDificultadSeverity = (dificultad) => {
    switch (dificultad.toLowerCase()) {
        case 'principiante':
            return 'success';
        case 'intermedio':
            return 'warning';
        case 'avanzado':
            return 'danger';
        default:
            return 'info';
    }
};

const cargarDatosPaciente = async (id_historia_clinica) => {
    try {
        const response = await obtenerPaciente(id_historia_clinica);
        const data = response.data[0];
        paciente.value = data;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener datos del paciente', life: 3000 });
    }
};

const cargarPuntaje = async (id_historia_clinica) => {
    try {
        const response = await obtenerPuntaje(id_historia_clinica);
        scoreProcedimientos.value = response.data.map(item => ({
            name: `${item.codigo}: ${item.valor}`, value: item.codigo
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener puntajes', life: 3000 });
    }
};

const mostrarDetalleCaso = async (idCaso) => {
    try {
        const response = await obtenerCasoClinicoPorId(idCaso);
        casoSeleccionado.value = response.data;

        localStorage.setItem('id_historia_clinica', casoSeleccionado.value.id_historia_clinica);
        await cargarDatosPaciente(casoSeleccionado.value.id_historia_clinica);

        await cargarPuntaje(casoSeleccionado.value.id_historia_clinica);

        await cargarCategoriasYProcedimientos();
        await cargarProcedimientosAsignados(casoSeleccionado.value.id_historia_clinica);

        visible.value = true;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener el caso clínico', life: 3000 });
    }
};

const cargarCategoriasYProcedimientos = async () => {
    try {
        const response = await obtenerCategoriasProcedimientos();
        categoriasProcedimientos.value = response.data;
        categoriasProcedimientos.value.forEach(categoria => {
            selectedProcedimientosPorCategoria.value[categoria.id_categoria_procedimiento] = [];
        });
        for (let categoria of categoriasProcedimientos.value) {
            const resProcedimientos = await obtenerProcedimientosPorCategoria(categoria.id_categoria_procedimiento);
            const procedimientos = resProcedimientos.data.map(p => ({
                ...p,
                name: p.nombre,
                value: p.id_procedimiento,
            }));
            procedimientosPorCategoria.value[categoria.id_categoria_procedimiento] = procedimientos;
            procedimientos.forEach(procedimiento => {
                procedimientosMap.value[procedimiento.id_procedimiento] = procedimiento;
            });
        }
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar categorías y procedimientos', life: 3000 });
    }
};

const cargarProcedimientosAsignados = async (id_historia_clinica) => {
    try {
        const response = await obtenerProcedimientosAsignadosPorHistoriaClinica(id_historia_clinica);
        const data = response.data;
        for (let categoriaId in selectedProcedimientosPorCategoria.value) {
            selectedProcedimientosPorCategoria.value[categoriaId] = [];
        }
        data.forEach(pa => {
            const procedimiento = procedimientosMap.value[pa.id_procedimiento];
            if (procedimiento) {
                const categoriaId = procedimiento.id_categoria_procedimiento;
                if (!selectedProcedimientosPorCategoria.value[categoriaId]) {
                    selectedProcedimientosPorCategoria.value[categoriaId] = [];
                }
                selectedProcedimientosPorCategoria.value[categoriaId].push(pa.id_procedimiento);
                procedimientoDetails.value[pa.id_procedimiento] = {
                    feedback: pa.feed_procedimiento_asignado,
                    score: pa.puntaje_procedimiento_asignado,
                    nombre: pa.nombre,
                };
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar procedimientos asignados', life: 3000 });
    }
};

const getProcedimientoNameById = (procedimientoId) => {
    return procedimientosMap.value[procedimientoId]?.name || '';
};

const allSelectedProcedimientos = computed(() => {
    let allProcedimientos = [];
    for (let categoriaId in selectedProcedimientosPorCategoria.value) {
        allProcedimientos = allProcedimientos.concat(selectedProcedimientosPorCategoria.value[categoriaId]);
    }
    return allProcedimientos;
});

const guardarProcedimientosAsignados = async () => {
    try {
        const data = allSelectedProcedimientos.value.map(procedimientoId => ({
            id_procedimiento: procedimientoId,
            feed_procedimiento_asignado: procedimientoDetails.value[procedimientoId].feedback,
            puntaje_procedimiento_asignado: procedimientoDetails.value[procedimientoId].score,
        }));

        await actualizarProcedimientosAsignados(casoSeleccionado.value.id_historia_clinica, data);

        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Procedimientos asignados guardados correctamente', life: 3000 });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al guardar procedimientos asignados', life: 3000 });
    }
};


watchEffect(() => {
    const allProcedimientos = allSelectedProcedimientos.value.map(id => parseInt(id));
    const currentProcedimientosDetails = Object.keys(procedimientoDetails.value).map(id => parseInt(id));
    allProcedimientos.forEach(procedimientoId => {
        if (!currentProcedimientosDetails.includes(procedimientoId)) {
            procedimientoDetails.value[procedimientoId] = {
                feedback: '',
                score: null,
                nombre: getProcedimientoNameById(procedimientoId),
            };
        }
    });
    currentProcedimientosDetails.forEach(procedimientoId => {
        if (!allProcedimientos.includes(procedimientoId)) {
            delete procedimientoDetails.value[procedimientoId];
        }
    });
});

onMounted(() => {
    cargarCasosClinicos();
});
</script>

<template>
    <div class="grid">
        <div v-for="caso in casosClinicos" :key="caso.id_caso_clinico" class="col md:col-4">
            <Card style="overflow: hidden">
                <template #title>Caso N° {{ caso.id_caso_clinico }}</template>
                <template #subtitle>Autor: {{ caso.autor }}</template>
                <template #content>
                    <div class="grid">
                        <div class="col md:col-12 capitalize"><strong>Nombre: </strong>{{ caso.nombre }} {{ caso.paterno
                            }} {{
                                caso.materno }}</div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-4"><strong>Peso: </strong>{{ caso.peso }} kg</div>
                        <div class="col md:col-4"><strong>Talla: </strong>{{ caso.talla }} m</div>
                        <div class="col md:col-4 capitalize"><strong>Sexo: </strong>{{ caso.sexo }}</div>
                    </div>
                    <p class="m-0 text-justify">
                        {{ caso.descripcion }}
                    </p>
                    <div class="grid pt-2">
                        <div class="col md:col-12"><strong>Categoría: </strong>
                            <Tag :value="caso.categoria" severity="info" />
                        </div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-12"><strong>Dificultad: </strong>
                            <Tag :value="caso.difucultad" :severity="getDificultadSeverity(caso.difucultad)" />
                        </div>
                    </div>
                </template>
                <template #footer>
                    <div class="flex gap-3 mt-1">
                        <Button :label="caso.estado === 'deshabilitado' ? 'Habilitar' : 'Deshabilitar'"
                            @click="toggleEstadoCaso(caso)"
                            :severity="caso.estado === 'deshabilitado' ? 'contrast' : 'danger'" class="w-full" />
                        <Button label="Ver" class="w-full" @click="mostrarDetalleCaso(caso.id_caso_clinico)" />
                    </div>
                </template>
            </Card>
        </div>
        <Dialog v-model:visible="visible" modal header="Ver caso clínico" :style="{ width: '65rem' }">
            <div class="justify-content-center">
                <h5>Selecciona los procedimientos para el caso</h5>

                <!-- Iterar sobre categorías de procedimientos -->
                <div v-for="categoria in categoriasProcedimientos" :key="categoria.id_categoria_procedimiento"
                    class="pt-4">
                    <div class="grid">
                        <div class="col-12">
                            <h5>{{ categoria.nombre }}</h5>
                        </div>
                    </div>
                    <div class="card flex justify-content-center">
                        <SelectButton v-model="selectedProcedimientosPorCategoria[categoria.id_categoria_procedimiento]"
                            :options="procedimientosPorCategoria[categoria.id_categoria_procedimiento]"
                            optionLabel="name" optionValue="value" multiple aria-labelledby="multiple" />
                    </div>

                    <!-- Campos dinámicos para procedimientos seleccionados en esta categoría -->
                    <div v-for="(procedimientoId, index) in selectedProcedimientosPorCategoria[categoria.id_categoria_procedimiento]"
                        :key="procedimientoId" class="grid pt-3">
                        <div class="col md:col-4">
                            <h6>Procedimiento {{ index + 1 }}: {{ procedimientoDetails[procedimientoId]?.nombre }}
                            </h6>
                        </div>
                        <div class="col md:col-4">
                            <FloatLabel>
                                <Textarea v-model="procedimientoDetails[procedimientoId].feedback" autoResize rows="3"
                                    cols="30" />
                                <label for="feedback">Retroalimentación</label>
                            </FloatLabel>
                        </div>
                        <div class="col md:col-3">
                            <FloatLabel>
                                <Dropdown v-model="procedimientoDetails[procedimientoId].score"
                                    :options="scoreProcedimientos" optionLabel="name" optionValue="value"
                                    placeholder="Elige una opción" checkmark :highlightOnSelect="false"
                                    class="w-full md:w-14rem" />
                                <label for="score">Puntaje Asignado</label>
                            </FloatLabel>
                        </div>
                        <div class="col md:col-1"></div>
                    </div>
                </div>

                <div class="flex py-4 gap-2">
                    <Button label="Atrás" severity="secondary" icon="pi pi-arrow-left" @click="prevCallback" />
                    <Button label="Guardar" @click="guardarProcedimientosAsignados" severity="success"
                        icon="pi pi-save" />
                    <Button label="Siguiente" icon="pi pi-arrow-right" iconPos="right" @click="nextCallback" />
                </div>
                <div class="flex justify-content-end gap-2">
                    <Button type="button" label="Cerrar" severity="secondary" @click=cerrarDialogo></Button>
                </div>
            </div>
        </Dialog>

    </div>
</template>













<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted, watchEffect } from 'vue';
import {
    obtenerCasosClinicos, cambiarEstadoCaso,
    obtenerCasoClinicoPorId,
    obtenerPaciente,
    obtenerPuntaje,
    obtenerCategoriasAnalisis, obtenerSubcategoriasPorCategoria,
    obtenerSolicitudesAnalisisPorHistoriaClinica, actualizarSolicitudesAnalisis,
} from '../services/casoService';
import { useToast } from 'primevue/usetoast';

const toast = useToast();
const casosClinicos = ref([]);
const visible = ref(false);
const casoSeleccionado = ref(null);

const paciente = ref({});

const scoreAnalisis = ref([]);
const categoriasAnalisis = ref([]);
const subcategoriasPorCategoria = ref({});
const selectedSubcategoriasPorCategoria = ref({});
const analisisDetails = ref({});
const subcategoriasMap = ref({});

const cerrarDialogo = () => {
    visible.value = false;
    localStorage.removeItem('id_historia_clinica');
};

const cargarCasosClinicos = async () => {
    try {
        const response = await obtenerCasosClinicos();
        casosClinicos.value = response.data;
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'Error al obtener los casos clínicos',
            life: 3000
        });
    }
};

const toggleEstadoCaso = async (caso) => {
    try {
        const nuevoEstado = caso.estado === 'habilitado' ? 'deshabilitado' : 'habilitado';
        await cambiarEstadoCaso(caso.id_caso_clinico, nuevoEstado);
        caso.estado = nuevoEstado;
        toast.add({
            severity: caso.estado === 'habilitado' ? 'success' : 'warn',
            summary: 'Éxito',
            detail: `Se ha ${nuevoEstado} el caso clínico N°${caso.id_caso_clinico}`,
            life: 3000
        });
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'No se pudo cambiar el estado del caso clínico',
            life: 3000
        });
    }
};

const getDificultadSeverity = (dificultad) => {
    switch (dificultad.toLowerCase()) {
        case 'principiante':
            return 'success';
        case 'intermedio':
            return 'warning';
        case 'avanzado':
            return 'danger';
        default:
            return 'info';
    }
};

const cargarDatosPaciente = async (id_historia_clinica) => {
    try {
        const response = await obtenerPaciente(id_historia_clinica);
        const data = response.data[0];
        paciente.value = data;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener datos del paciente', life: 3000 });
    }
};

const cargarPuntaje = async (id_historia_clinica) => {
    try {
        const response = await obtenerPuntaje(id_historia_clinica);
        scoreAnalisis.value = response.data.map(item => ({
            name: `${item.codigo}: ${item.valor}`, value: item.codigo
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener puntajes', life: 3000 });
    }
};

const mostrarDetalleCaso = async (idCaso) => {
    try {
        const response = await obtenerCasoClinicoPorId(idCaso);
        casoSeleccionado.value = response.data;

        localStorage.setItem('id_historia_clinica', casoSeleccionado.value.id_historia_clinica);
        await cargarDatosPaciente(casoSeleccionado.value.id_historia_clinica);

        await cargarPuntaje(casoSeleccionado.value.id_historia_clinica);

        await cargarCategoriasYSubcategorias();
        await cargarSolicitudesAnalisis(casoSeleccionado.value.id_historia_clinica);

        visible.value = true;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener el caso clínico', life: 3000 });
    }
};

const cargarCategoriasYSubcategorias = async () => {
    try {
        const response = await obtenerCategoriasAnalisis();
        categoriasAnalisis.value = response.data;
        categoriasAnalisis.value.forEach(categoria => {
            selectedSubcategoriasPorCategoria.value[categoria.id_categoria_analisis] = [];
        });
        for (let categoria of categoriasAnalisis.value) {
            const resSubcategorias = await obtenerSubcategoriasPorCategoria(categoria.id_categoria_analisis);
            const subcategorias = resSubcategorias.data.map(s => ({
                ...s,
                name: s.nombre_subcategoria,
                value: s.id_subcategoria_analisis,
            }));
            subcategoriasPorCategoria.value[categoria.id_categoria_analisis] = subcategorias;
            subcategorias.forEach(subcategoria => {
                subcategoriasMap.value[subcategoria.id_subcategoria_analisis] = subcategoria;
            });
        }
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar categorías y subcategorías', life: 3000 });
    }
};

const cargarSolicitudesAnalisis = async (id_historia_clinica) => {
    try {
        const response = await obtenerSolicitudesAnalisisPorHistoriaClinica(id_historia_clinica);
        const data = response.data;
        data.forEach(sa => {
            const categoriaId = sa.id_categoria_analisis;
            // Puntaje y feedback por categoría
            analisisDetails.value[categoriaId] = {
                puntaje_analisis: sa.puntaje_analisis,
                feed_analisis: sa.feed_analsis,
                detalles: {},
            };
            selectedSubcategoriasPorCategoria.value[categoriaId] = [];
            if (sa.detalles && sa.detalles.length > 0) {
                sa.detalles.forEach(detalle => {
                    selectedSubcategoriasPorCategoria.value[categoriaId].push(detalle.id_subcategoria_analisis);
                    analisisDetails.value[categoriaId].detalles[detalle.id_subcategoria_analisis] = {
                        resultado: detalle.resultado,
                        nombre_subcategoria: detalle.nombre_subcategoria,
                    };
                });
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar solicitudes de análisis', life: 3000 });
    }
};


watchEffect(() => {
    // Update analisisDetails when selectedSubcategorias change
    for (let categoriaId in selectedSubcategoriasPorCategoria.value) {
        const selectedIds = selectedSubcategoriasPorCategoria.value[categoriaId];
        if (!analisisDetails.value[categoriaId]) {
            analisisDetails.value[categoriaId] = {
                puntaje_analisis: null,
                feed_analisis: '',
                detalles: {},
            };
        }
        const detalles = analisisDetails.value[categoriaId].detalles;
        selectedIds.forEach(subcatId => {
            if (!detalles[subcatId]) {
                detalles[subcatId] = {
                    resultado: '',
                    nombre_subcategoria: subcategoriasMap.value[subcatId]?.nombre_subcategoria || '',
                };
            }
        });
        // Remove unselected subcategorias
        for (let subcatId in detalles) {
            if (!selectedIds.includes(parseInt(subcatId))) {
                delete detalles[subcatId];
            }
        }
    }
});

const guardarSolicitudesAnalisis = async () => {
    try {
        const data = [];
        for (let categoriaId in analisisDetails.value) {
            const analisis = analisisDetails.value[categoriaId];
            const detallesArray = [];
            for (let subcatId in analisis.detalles) {
                detallesArray.push({
                    id_subcategoria_analisis: subcatId,
                    resultado: analisis.detalles[subcatId].resultado,
                });
            }
            data.push({
                id_categoria_analisis: categoriaId,
                puntaje_analisis: analisis.puntaje_analisis,
                feed_analsis: analisis.feed_analisis,
                detalles: detallesArray,
            });
        }
        await actualizarSolicitudesAnalisis(casoSeleccionado.value.id_historia_clinica, data);
        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Solicitudes de análisis guardadas correctamente', life: 3000 });
    } catch (error) {
        console.error(error);
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al guardar solicitudes de análisis', life: 3000 });
    }
};

onMounted(() => {
    cargarCasosClinicos();
});
</script>

<template>
    <div class="grid">
        <div v-for="caso in casosClinicos" :key="caso.id_caso_clinico" class="col md:col-4">
            <Card style="overflow: hidden">
                <template #title>Caso N° {{ caso.id_caso_clinico }}</template>
                <template #subtitle>Autor: {{ caso.autor }}</template>
                <template #content>
                    <div class="grid">
                        <div class="col md:col-12 capitalize"><strong>Nombre: </strong>{{ caso.nombre }} {{ caso.paterno
                            }} {{
                                caso.materno }}</div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-4"><strong>Peso: </strong>{{ caso.peso }} kg</div>
                        <div class="col md:col-4"><strong>Talla: </strong>{{ caso.talla }} m</div>
                        <div class="col md:col-4 capitalize"><strong>Sexo: </strong>{{ caso.sexo }}</div>
                    </div>
                    <p class="m-0 text-justify">
                        {{ caso.descripcion }}
                    </p>
                    <div class="grid pt-2">
                        <div class="col md:col-12"><strong>Categoría: </strong>
                            <Tag :value="caso.categoria" severity="info" />
                        </div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-12"><strong>Dificultad: </strong>
                            <Tag :value="caso.difucultad" :severity="getDificultadSeverity(caso.difucultad)" />
                        </div>
                    </div>
                </template>
                <template #footer>
                    <div class="flex gap-3 mt-1">
                        <Button :label="caso.estado === 'deshabilitado' ? 'Habilitar' : 'Deshabilitar'"
                            @click="toggleEstadoCaso(caso)"
                            :severity="caso.estado === 'deshabilitado' ? 'contrast' : 'danger'" class="w-full" />
                        <Button label="Ver" class="w-full" @click="mostrarDetalleCaso(caso.id_caso_clinico)" />
                    </div>
                </template>
            </Card>
        </div>
        <Dialog v-model:visible="visible" modal header="Ver caso clínico" :style="{ width: '65rem' }">
            <div class="justify-content-center">
                <h5>Selecciona los análisis para el caso</h5>

                <!-- Iterar sobre categorías de análisis -->
                <div v-for="categoria in categoriasAnalisis" :key="categoria.id_categoria_analisis" class="pt-4">
                    <div class="grid">
                        <div class="col-12">
                            <h5>{{ categoria.nombre_categoria }}</h5>
                        </div>
                    </div>
                    <div class="card flex justify-content-center">
                        <SelectButton v-model="selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis]"
                            :options="subcategoriasPorCategoria[categoria.id_categoria_analisis]" optionLabel="name"
                            optionValue="value" multiple aria-labelledby="multiple" />
                    </div>

                    <!-- Campos dinámicos para subcategorías seleccionadas en esta categoría -->
                    <div v-if="selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis].length > 0">
                        <!-- Mostrar campos para puntaje y feedback de la categoría -->
                        <div class="grid pt-3">
                            <div class="col md:col-6">
                                <FloatLabel>
                                    <Textarea v-model="analisisDetails[categoria.id_categoria_analisis].feed_analisis"
                                        autoResize rows="3" cols="30" />
                                    <label for="feed_analisis">Retroalimentación</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-3">
                                <FloatLabel>
                                    <Dropdown
                                        v-model="analisisDetails[categoria.id_categoria_analisis].puntaje_analisis"
                                        :options="scoreAnalisis" optionLabel="name" optionValue="value"
                                        placeholder="Elige una opción" checkmark :highlightOnSelect="false"
                                        class="w-full md:w-14rem" />
                                    <label for="puntaje_analisis">Puntaje Asignado</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-3"></div>
                        </div>

                        <!-- Mostrar campos para cada subcategoría seleccionada -->
                        <div v-for="subcatId in selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis]"
                            :key="subcatId" class="grid pt-3">
                            <div class="col md:col-4">
                                <h6>{{
                                    analisisDetails[categoria.id_categoria_analisis].detalles[subcatId].nombre_subcategoria
                                    }}</h6>
                            </div>
                            <div class="col md:col-4">
                                <FloatLabel>
                                    <InputText
                                        v-model="analisisDetails[categoria.id_categoria_analisis].detalles[subcatId].resultado" />
                                    <label for="resultado">Resultado</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-4"></div>
                        </div>
                    </div>
                </div>

                <div class="flex py-4 gap-2">
                    <!-- Botones de navegación si los tienes -->
                    <Button label="Guardar" @click="guardarSolicitudesAnalisis" severity="success" icon="pi pi-save" />
                </div>
                <div class="flex justify-content-end gap-2">
                    <Button type="button" label="Cerrar" severity="secondary" @click=cerrarDialogo></Button>
                </div>
            </div>
        </Dialog>
    </div>
</template>



















<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted, watchEffect, reactive } from 'vue';
import {
    obtenerCasosClinicos, cambiarEstadoCaso,
    obtenerCasoClinicoPorId,
    obtenerPaciente,
    obtenerPuntaje,
    obtenerCategoriasAnalisis, obtenerSubcategoriasPorCategoria,
    obtenerSolicitudesAnalisisPorHistoriaClinica, actualizarSolicitudesAnalisis,
    obtenerCategoriasConImagenologias, obtenerEstudiosImagenologiaPorHistoriaClinica,
    actualizarEstudiosImagenologia, cargarImagenCategoria,
    actualizarPuntajeLaboratorio
} from '../services/casoService';
import { useToast } from 'primevue/usetoast';

const toast = useToast();
const casosClinicos = ref([]);
const visible = ref(false);
const casoSeleccionado = ref(null);

const paciente = ref({});

const scoreAnalisis = ref([]);
const categoriasAnalisis = ref([]);
const subcategoriasPorCategoria = ref({});
const selectedSubcategoriasPorCategoria = ref({});
const analisisDetails = ref({});
const subcategoriasMap = ref({});

const scoreImagenologia = ref([]);
const categoriasImagenologia = ref([]);
const imagenesData = ref([]); // Almacena estudios de imagenología

// Objeto reactivo para almacenar las imagenologías seleccionadas por categoría
const selectedImagenologiasByCategory = reactive({});


const cerrarDialogo = () => {
    visible.value = false;
    localStorage.removeItem('id_historia_clinica');
};

const cargarCasosClinicos = async () => {
    try {
        const response = await obtenerCasosClinicos();
        casosClinicos.value = response.data;
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'Error al obtener los casos clínicos',
            life: 3000
        });
    }
};

const toggleEstadoCaso = async (caso) => {
    try {
        const nuevoEstado = caso.estado === 'habilitado' ? 'deshabilitado' : 'habilitado';
        await cambiarEstadoCaso(caso.id_caso_clinico, nuevoEstado);
        caso.estado = nuevoEstado;
        toast.add({
            severity: caso.estado === 'habilitado' ? 'success' : 'warn',
            summary: 'Éxito',
            detail: `Se ha ${nuevoEstado} el caso clínico N°${caso.id_caso_clinico}`,
            life: 3000
        });
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'No se pudo cambiar el estado del caso clínico',
            life: 3000
        });
    }
};

const getDificultadSeverity = (dificultad) => {
    switch (dificultad.toLowerCase()) {
        case 'principiante':
            return 'success';
        case 'intermedio':
            return 'warning';
        case 'avanzado':
            return 'danger';
        default:
            return 'info';
    }
};

const cargarDatosPaciente = async (id_historia_clinica) => {
    try {
        const response = await obtenerPaciente(id_historia_clinica);
        const data = response.data[0];
        paciente.value = data;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener datos del paciente', life: 3000 });
    }
};

const cargarPuntajeAnalisis = async (id_historia_clinica) => {
    try {
        const response = await obtenerPuntaje(id_historia_clinica);
        scoreAnalisis.value = response.data.map(item => ({
            name: `${item.codigo}: ${item.valor}`, value: item.codigo
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener puntajes', life: 3000 });
    }
};

const mostrarDetalleCaso = async (idCaso) => {
    try {
        const response = await obtenerCasoClinicoPorId(idCaso);
        casoSeleccionado.value = response.data;

        localStorage.setItem('id_historia_clinica', casoSeleccionado.value.id_historia_clinica);
        await cargarDatosPaciente(casoSeleccionado.value.id_historia_clinica);

        await cargarPuntajeAnalisis(casoSeleccionado.value.id_historia_clinica);

        await cargarCategoriasYSubcategorias();
        await cargarSolicitudesAnalisis(casoSeleccionado.value.id_historia_clinica);

        await cargarPuntajeImagenologia(casoSeleccionado.value.id_historia_clinica);

        await cargarCategoriasImagenologia();
        await cargarEstudiosImagenes(casoSeleccionado.value.id_historia_clinica);

        visible.value = true;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener el caso clínico', life: 3000 });
    }
};

const cargarCategoriasYSubcategorias = async () => {
    try {
        const response = await obtenerCategoriasAnalisis();
        categoriasAnalisis.value = response.data;
        categoriasAnalisis.value.forEach(categoria => {
            selectedSubcategoriasPorCategoria.value[categoria.id_categoria_analisis] = [];
        });
        for (let categoria of categoriasAnalisis.value) {
            const resSubcategorias = await obtenerSubcategoriasPorCategoria(categoria.id_categoria_analisis);
            const subcategorias = resSubcategorias.data.map(s => ({
                ...s,
                name: s.nombre_subcategoria,
                value: s.id_subcategoria_analisis,
            }));
            subcategoriasPorCategoria.value[categoria.id_categoria_analisis] = subcategorias;
            subcategorias.forEach(subcategoria => {
                subcategoriasMap.value[subcategoria.id_subcategoria_analisis] = subcategoria;
            });
        }
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar categorías y subcategorías', life: 3000 });
    }
};

const cargarSolicitudesAnalisis = async (id_historia_clinica) => {
    try {
        const response = await obtenerSolicitudesAnalisisPorHistoriaClinica(id_historia_clinica);
        const data = response.data;
        data.forEach(sa => {
            const categoriaId = sa.id_categoria_analisis;
            // Puntaje y feedback por categoría
            analisisDetails.value[categoriaId] = {
                puntaje_analisis: sa.puntaje_analisis,
                feed_analisis: sa.feed_analsis,
                detalles: {},
            };
            selectedSubcategoriasPorCategoria.value[categoriaId] = [];
            if (sa.detalles && sa.detalles.length > 0) {
                sa.detalles.forEach(detalle => {
                    selectedSubcategoriasPorCategoria.value[categoriaId].push(detalle.id_subcategoria_analisis);
                    analisisDetails.value[categoriaId].detalles[detalle.id_subcategoria_analisis] = {
                        resultado: detalle.resultado,
                        nombre_subcategoria: detalle.nombre_subcategoria,
                    };
                });
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar solicitudes de análisis', life: 3000 });
    }
};


watchEffect(() => {
    // Update analisisDetails when selectedSubcategorias change
    for (let categoriaId in selectedSubcategoriasPorCategoria.value) {
        const selectedIds = selectedSubcategoriasPorCategoria.value[categoriaId];
        if (!analisisDetails.value[categoriaId]) {
            analisisDetails.value[categoriaId] = {
                puntaje_analisis: null,
                feed_analisis: '',
                detalles: {},
            };
        }
        const detalles = analisisDetails.value[categoriaId].detalles;
        selectedIds.forEach(subcatId => {
            if (!detalles[subcatId]) {
                detalles[subcatId] = {
                    resultado: '',
                    nombre_subcategoria: subcategoriasMap.value[subcatId]?.nombre_subcategoria || '',
                };
            }
        });
        // Remove unselected subcategorias
        for (let subcatId in detalles) {
            if (!selectedIds.includes(parseInt(subcatId))) {
                delete detalles[subcatId];
            }
        }
    }
});

const guardarSolicitudesAnalisis = async () => {
    try {
        const data = [];
        for (let categoriaId in analisisDetails.value) {
            const analisis = analisisDetails.value[categoriaId];
            const detallesArray = [];
            for (let subcatId in analisis.detalles) {
                detallesArray.push({
                    id_subcategoria_analisis: subcatId,
                    resultado: analisis.detalles[subcatId].resultado,
                });
            }
            data.push({
                id_categoria_analisis: categoriaId,
                puntaje_analisis: analisis.puntaje_analisis,
                feed_analsis: analisis.feed_analisis,
                detalles: detallesArray,
            });
        }
        await actualizarSolicitudesAnalisis(casoSeleccionado.value.id_historia_clinica, data);
        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Solicitudes de análisis guardadas correctamente', life: 3000 });
    } catch (error) {
        console.error(error);
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al guardar solicitudes de análisis', life: 3000 });
    }
};

onMounted(() => {
    cargarCasosClinicos();
});


const cargarPuntajeImagenologia = async (id_historia_clinica) => {
    try {
        const response = await obtenerPuntaje(id_historia_clinica);
        scoreImagenologia.value = response.data.map(item => ({
            name: `${item.codigo}: ${item.valor}`, value: item.codigo
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener puntajes', life: 3000 });
    }
};

const cargarCategoriasImagenologia = async () => {
    try {
        const response = await obtenerCategoriasConImagenologias();
        categoriasImagenologia.value = response.data; // Ya estructurado con imagenologías

        // Inicializar las selecciones por categoría
        categoriasImagenologia.value.forEach(category => {
            if (!selectedImagenologiasByCategory[category.id_categoria_imagenologia]) {
                selectedImagenologiasByCategory[category.id_categoria_imagenologia] = [];
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener categorías de imagenología', life: 3000 });
    }
};

const cargarEstudiosImagenes = async (id_historia_clinica) => {
    try {
        const response = await obtenerEstudiosImagenologiaPorHistoriaClinica(id_historia_clinica);
        const estudios = response.data;
        imagenesData.value = estudios.map(estudio => ({
            id_estudios_imagenologia: estudio.id_estudios_imagenologia,
            id_imagenologia: estudio.id_imagenologia,
            nombre: estudio.imagenologia_nombre,
            categoria_nombre: estudio.categoria_nombre,
            interpretacion: estudio.interpretacion,
            path: estudio.path,
            feed_estudios_imagenologia: estudio.feed_estudios_imagenologia,
            puntaje_estudios_imagenologia: estudio.puntaje_estudios_imagenologia
        }));

        // Mapear las imagenologías seleccionadas por categoría
        estudios.forEach(estudio => {
            const categoryId = categoriasImagenologia.value.find(category => category.nombre === estudio.categoria_nombre)?.id_categoria_imagenologia;
            if (categoryId) {
                if (!selectedImagenologiasByCategory[categoryId]) {
                    selectedImagenologiasByCategory[categoryId] = [];
                }
                if (!selectedImagenologiasByCategory[categoryId].includes(estudio.id_imagenologia)) {
                    selectedImagenologiasByCategory[categoryId].push(estudio.id_imagenologia);
                }
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener estudios de imagenología', life: 3000 });
    }
};

// eslint-disable-next-line no-unused-vars
const onImagenologiaSelectionChange = (categoryId) => {
    // Obtener todas las imagenologías seleccionadas
    const selectedIds = Object.values(selectedImagenologiasByCategory).flat();

    // Obtener los IDs previamente seleccionados
    const previousIds = imagenesData.value.map(img => img.id_imagenologia);

    const addedIds = selectedIds.filter(id => !previousIds.includes(id));
    const removedIds = previousIds.filter(id => !selectedIds.includes(id));

    // Agregar nuevas imagenologías a imagenesData
    addedIds.forEach(id_imagenologia => {
        const imagenologia = categoriasImagenologia.value.flatMap(cat => cat.imagenologias)
            .find(img => img.id_imagenologia === id_imagenologia);
        if (imagenologia) {
            const category = categoriasImagenologia.value.find(cat => cat.imagenologias.some(img => img.id_imagenologia === id_imagenologia));
            imagenesData.value.push({
                id_estudios_imagenologia: null,
                id_imagenologia: id_imagenologia,
                nombre: imagenologia.nombre,
                categoria_nombre: category.nombre,
                interpretacion: '',
                path: '',
                feed_estudios_imagenologia: '',
                puntaje_estudios_imagenologia: ''
            });
        }
    });

    // Eliminar imagenologías de imagenesData
    removedIds.forEach(id_imagenologia => {
        const index = imagenesData.value.findIndex(img => img.id_imagenologia === id_imagenologia);
        if (index !== -1) {
            imagenesData.value.splice(index, 1);
        }
    });
};

const onUpload = async (event, index) => {
    const file = event.files[0];
    const formData = new FormData();
    formData.append('imagen', file);
    formData.append('id_imagenologia', imagenesData.value[index].id_imagenologia);

    try {
        const response = await cargarImagenCategoria(formData);
        imagenesData.value[index].path = response.data.path;
        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Imagen cargada correctamente', life: 3000 });
    } catch (error) {
        console.log(error);
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar la imagen', life: 3000 });
    }
};


onMounted(() => {
    cargarCasosClinicos();
});

function contarPuntajesImagenologia(imagenesData) {
    let puntajeCount = { A: 0, B: 0, C: 0, D: 0, E: 0 };

    imagenesData.forEach(imagen => {
        const puntaje = imagen.puntaje_estudios_imagenologia;
        if (puntaje && puntajeCount.hasOwnProperty(puntaje)) {
            puntajeCount[puntaje]++;
        }
    });

    return {
        puntaje_a: puntajeCount.A || 0,
        puntaje_b: puntajeCount.B || 0,
        puntaje_c: puntajeCount.C || 0,
        puntaje_d: puntajeCount.D || 0,
        puntaje_e: puntajeCount.E || 0
    };
}

function contarPuntajesAnalisis(analisisDetails) {
    let puntajeCount = { A: 0, B: 0, C: 0, D: 0, E: 0 };

    for (let categoriaId in analisisDetails) {
        const puntaje = analisisDetails[categoriaId].puntaje_analisis;
        if (puntaje && puntajeCount.hasOwnProperty(puntaje)) {
            puntajeCount[puntaje]++;
        }
    }

    return {
        puntaje_a: puntajeCount.A || 0,
        puntaje_b: puntajeCount.B || 0,
        puntaje_c: puntajeCount.C || 0,
        puntaje_d: puntajeCount.D || 0,
        puntaje_e: puntajeCount.E || 0
    };
}

function sumarPuntajes(puntajes1, puntajes2) {
    return {
        puntaje_a: (puntajes1.puntaje_a || 0) + (puntajes2.puntaje_a || 0),
        puntaje_b: (puntajes1.puntaje_b || 0) + (puntajes2.puntaje_b || 0),
        puntaje_c: (puntajes1.puntaje_c || 0) + (puntajes2.puntaje_c || 0),
        puntaje_d: (puntajes1.puntaje_d || 0) + (puntajes2.puntaje_d || 0),
        puntaje_e: (puntajes1.puntaje_e || 0) + (puntajes2.puntaje_e || 0)
    };
}

function prepararDatosAnalisis() {
    const data = [];
    for (let categoriaId in analisisDetails.value) {
        const analisis = analisisDetails.value[categoriaId];
        const detallesArray = [];
        for (let subcatId in analisis.detalles) {
            detallesArray.push({
                id_subcategoria_analisis: subcatId,
                resultado: analisis.detalles[subcatId].resultado,
            });
        }
        data.push({
            id_categoria_analisis: categoriaId,
            puntaje_analisis: analisis.puntaje_analisis,
            feed_analsis: analisis.feed_analisis,
            detalles: detallesArray,
        });
    }
    return data;
}

const guardarTodosLosCambiosLaboratorio = async () => {
    try {
        // Guardar cambios de imagenología
        await actualizarEstudiosImagenologia(casoSeleccionado.value.id_historia_clinica, imagenesData.value);

        // Guardar cambios de análisis

        await actualizarSolicitudesAnalisis(casoSeleccionado.value.id_historia_clinica, prepararDatosAnalisis());

        // Contar puntajes de imagenología
        let puntajesImagenologia = contarPuntajesImagenologia(imagenesData.value);
        console.log("puntajeeeImagenologia: ", puntajesImagenologia)

        // Contar puntajes de análisis
        let puntajesAnalisis = contarPuntajesAnalisis(analisisDetails.value);
        console.log("puntajeeeAnalisis: ", puntajesAnalisis)

        // Sumar puntajes
        let puntajesTotales = sumarPuntajes(puntajesImagenologia, puntajesAnalisis);
        console.log("puntajeeeTotales: ", puntajesTotales)

        // Actualizar puntaje en la base de datos
        await actualizarPuntajeLaboratorio(casoSeleccionado.value.id_historia_clinica, puntajesTotales);

        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Laboratorio actualizado correctamente', life: 3000 });
    } catch (error) {
        console.error(error);
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al actualizar el laboratorio', life: 3000 });
    }
};


</script>

<template>
    <div class="grid">
        <div v-for="caso in casosClinicos" :key="caso.id_caso_clinico" class="col md:col-4">
            <Card style="overflow: hidden">
                <template #title>Caso N° {{ caso.id_caso_clinico }}</template>
                <template #subtitle>Autor: {{ caso.autor }}</template>
                <template #content>
                    <div class="grid">
                        <div class="col md:col-12 capitalize"><strong>Nombre: </strong>{{ caso.nombre }} {{ caso.paterno
                            }} {{
                                caso.materno }}</div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-4"><strong>Peso: </strong>{{ caso.peso }} kg</div>
                        <div class="col md:col-4"><strong>Talla: </strong>{{ caso.talla }} m</div>
                        <div class="col md:col-4 capitalize"><strong>Sexo: </strong>{{ caso.sexo }}</div>
                    </div>
                    <p class="m-0 text-justify">
                        {{ caso.descripcion }}
                    </p>
                    <div class="grid pt-2">
                        <div class="col md:col-12"><strong>Categoría: </strong>
                            <Tag :value="caso.categoria" severity="info" />
                        </div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-12"><strong>Dificultad: </strong>
                            <Tag :value="caso.difucultad" :severity="getDificultadSeverity(caso.difucultad)" />
                        </div>
                    </div>
                </template>
                <template #footer>
                    <div class="flex gap-3 mt-1">
                        <Button :label="caso.estado === 'deshabilitado' ? 'Habilitar' : 'Deshabilitar'"
                            @click="toggleEstadoCaso(caso)"
                            :severity="caso.estado === 'deshabilitado' ? 'contrast' : 'danger'" class="w-full" />
                        <Button label="Ver" class="w-full" @click="mostrarDetalleCaso(caso.id_caso_clinico)" />
                    </div>
                </template>
            </Card>
        </div>
        <Dialog v-model:visible="visible" modal header="Ver caso clínico" :style="{ width: '65rem' }">
            <div class="justify-content-center">
                <h5>Selecciona los análisis para el caso</h5>

                <!-- Iterar sobre categorías de análisis -->
                <div v-for="categoria in categoriasAnalisis" :key="categoria.id_categoria_analisis" class="pt-4">
                    <div class="grid">
                        <div class="col-12">
                            <h5>{{ categoria.nombre_categoria }}</h5>
                        </div>
                    </div>
                    <div class="card flex justify-content-center">
                        <SelectButton v-model="selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis]"
                            :options="subcategoriasPorCategoria[categoria.id_categoria_analisis]" optionLabel="name"
                            optionValue="value" multiple aria-labelledby="multiple" />
                    </div>

                    <!-- Campos dinámicos para subcategorías seleccionadas en esta categoría -->
                    <div v-if="selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis].length > 0">
                        <!-- Mostrar campos para puntaje y feedback de la categoría -->
                        <div class="grid pt-3">
                            <div class="col md:col-6">
                                <FloatLabel>
                                    <Textarea v-model="analisisDetails[categoria.id_categoria_analisis].feed_analisis"
                                        autoResize rows="3" cols="30" />
                                    <label for="feed_analisis">Retroalimentación</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-3">
                                <FloatLabel>
                                    <Dropdown
                                        v-model="analisisDetails[categoria.id_categoria_analisis].puntaje_analisis"
                                        :options="scoreAnalisis" optionLabel="name" optionValue="value"
                                        placeholder="Elige una opción" checkmark :highlightOnSelect="false"
                                        class="w-full md:w-14rem" />
                                    <label for="puntaje_analisis">Puntaje Asignado</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-3"></div>
                        </div>

                        <!-- Mostrar campos para cada subcategoría seleccionada -->
                        <div v-for="subcatId in selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis]"
                            :key="subcatId" class="grid pt-3">
                            <div class="col md:col-4">
                                <h6>{{
                                    analisisDetails[categoria.id_categoria_analisis].detalles[subcatId].nombre_subcategoria
                                }}</h6>
                            </div>
                            <div class="col md:col-4">
                                <FloatLabel>
                                    <InputText
                                        v-model="analisisDetails[categoria.id_categoria_analisis].detalles[subcatId].resultado" />
                                    <label for="resultado">Resultado</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-4"></div>
                        </div>
                    </div>
                </div>

                <div class="flex py-4 gap-2">
                    <!-- Botones de navegación si los tienes -->
                    <Button label="Guardar" @click="guardarSolicitudesAnalisis" severity="success" icon="pi pi-save" />
                </div>
            </div>

            <div class="justify-content-center">
                <h5>Selecciona las imagenologías para el caso</h5>
                <!-- Mostrar categorías y sus imagenologías con SelectButton -->
                <div v-for="category in categoriasImagenologia" :key="category.id_categoria_imagenologia" class="mt-4">
                    <h5>{{ category.nombre }}</h5>
                    <div class="text-center">
                        <SelectButton v-model="selectedImagenologiasByCategory[category.id_categoria_imagenologia]"
                            :options="category.imagenologias" optionLabel="nombre" optionValue="id_imagenologia"
                            multiple @change="onImagenologiaSelectionChange(category.id_categoria_imagenologia)" />
                    </div>
                </div>

                <!-- Mostrar estudios de imagenología -->
                <div v-for="(imgData, index) in imagenesData" :key="imgData.id_imagenologia" class="mt-4">
                    <h5>{{ imgData.categoria_nombre }} - {{ imgData.nombre }}</h5>
                    <div class="grid p-fluid">
                        <div class="col md:col-5">
                            <FileUpload name="imagen" accept="image/*" :auto="true" :customUpload="true"
                                :maxFileSize="1000000" chooseLabel="Elegir Imagen" :showCancelButton="false"
                                :showUploadButton="false" @select="(event) => onUpload(event, index)">
                                <template #content>
                                    <div v-if="imgData.path">
                                        <img :src="imgData.path" alt="Imagen" width="200" />
                                    </div>
                                    <div v-else>
                                        <p>Elige y arrastra una imagen.</p>
                                    </div>
                                </template>
                            </FileUpload>
                        </div>
                        <div class="col md:col-4">
                            <div class="grid">
                                <div class="col md:col-12">
                                    <FloatLabel>
                                        <Textarea v-model="imgData.interpretacion" autoResize rows="3" cols="30" />
                                        <label for="interpretacion">Interpretación</label>
                                    </FloatLabel>
                                </div>
                                <div class="col md:col-12 pt-3">
                                    <FloatLabel>
                                        <Textarea v-model="imgData.feed_estudios_imagenologia" autoResize rows="3"
                                            cols="30" />
                                        <label for="feed_estudios_imagenologia">Retroalimentación</label>
                                    </FloatLabel>
                                </div>
                            </div>
                        </div>
                        <div class="col md:col-3">
                            <FloatLabel>
                                <Dropdown v-model="imgData.puntaje_estudios_imagenologia" :options="scoreImagenologia"
                                    optionLabel="name" optionValue="value" placeholder="Elige una opción" checkmark
                                    :highlightOnSelect="false" class="w-full md:w-14rem" />
                                <label for="puntaje_estudios_imagenologia">Puntaje Asignado</label>
                            </FloatLabel>
                        </div>
                    </div>
                </div>

                <div class="flex py-4 gap-2">
                    <!-- Botones de navegación si los tienes -->
                    <Button label="Guardar" @click="guardarTodosLosCambiosLaboratorio" />
                </div>

                <div class="flex justify-content-end gap-2">
                    <Button type="button" label="Cancelar" severity="secondary" @click=cerrarDialogo></Button>
                    <Button type="button" label="Guardar" @click="guardarTodosLosCambiosLaboratorio"></Button>
                </div>
            </div>
        </Dialog>
    </div>
</template>





























<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted, watchEffect, reactive } from 'vue';
import {
    obtenerCasosClinicos, cambiarEstadoCaso,
    obtenerCasoClinicoPorId,
    obtenerPaciente,
    obtenerPuntaje,
    obtenerCategoriasAnalisis, obtenerSubcategoriasPorCategoria,
    obtenerSolicitudesAnalisisPorHistoriaClinica, actualizarSolicitudesAnalisis,
    obtenerCategoriasConImagenologias, obtenerEstudiosImagenologiaPorHistoriaClinica,
    actualizarEstudiosImagenologia, cargarImagenCategoria, actualizarPuntajeLaboratorio
} from '../services/casoService';
import { useToast } from 'primevue/usetoast';

const toast = useToast();
const casosClinicos = ref([]);
const visible = ref(false);
const casoSeleccionado = ref(null);

const paciente = ref({});

const scoreAnalisis = ref([]);
const categoriasAnalisis = ref([]);
const subcategoriasPorCategoria = ref({});
const selectedSubcategoriasPorCategoria = ref({});
const analisisDetails = ref({});
const subcategoriasMap = ref({});

const scoreImagenologia = ref([]);
const categoriasImagenologia = ref([]);
const imagenesData = ref([]);
const selectedImagenologiasByCategory = reactive({});

const cerrarDialogo = () => {
    visible.value = false;
    localStorage.removeItem('id_historia_clinica');
};

const cargarCasosClinicos = async () => {
    try {
        const response = await obtenerCasosClinicos();
        casosClinicos.value = response.data;
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'Error al obtener los casos clínicos',
            life: 3000
        });
    }
};

const toggleEstadoCaso = async (caso) => {
    try {
        const nuevoEstado = caso.estado === 'habilitado' ? 'deshabilitado' : 'habilitado';
        await cambiarEstadoCaso(caso.id_caso_clinico, nuevoEstado);
        caso.estado = nuevoEstado;
        toast.add({
            severity: caso.estado === 'habilitado' ? 'success' : 'warn',
            summary: 'Éxito',
            detail: `Se ha ${nuevoEstado} el caso clínico N°${caso.id_caso_clinico}`,
            life: 3000
        });
    } catch (error) {
        toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'No se pudo cambiar el estado del caso clínico',
            life: 3000
        });
    }
};

const getDificultadSeverity = (dificultad) => {
    switch (dificultad.toLowerCase()) {
        case 'principiante':
            return 'success';
        case 'intermedio':
            return 'warning';
        case 'avanzado':
            return 'danger';
        default:
            return 'info';
    }
};

const cargarDatosPaciente = async (id_historia_clinica) => {
    try {
        const response = await obtenerPaciente(id_historia_clinica);
        const data = response.data[0];
        paciente.value = data;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener datos del paciente', life: 3000 });
    }
};

const cargarPuntajeAnalisis = async (id_historia_clinica) => {
    try {
        const response = await obtenerPuntaje(id_historia_clinica);
        scoreAnalisis.value = response.data.map(item => ({
            name: `${item.codigo}: ${item.valor}`, value: item.codigo
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener puntajes', life: 3000 });
    }
};

const mostrarDetalleCaso = async (idCaso) => {
    try {
        const response = await obtenerCasoClinicoPorId(idCaso);
        casoSeleccionado.value = response.data;

        localStorage.setItem('id_historia_clinica', casoSeleccionado.value.id_historia_clinica);
        await cargarDatosPaciente(casoSeleccionado.value.id_historia_clinica);

        await cargarPuntajeAnalisis(casoSeleccionado.value.id_historia_clinica);

        await cargarCategoriasYSubcategorias();
        await cargarSolicitudesAnalisis(casoSeleccionado.value.id_historia_clinica);
        await cargarPuntajeImagenologia(casoSeleccionado.value.id_historia_clinica);
        await cargarCategoriasImagenologia();
        await cargarEstudiosImagenes(casoSeleccionado.value.id_historia_clinica);

        visible.value = true;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener el caso clínico', life: 3000 });
    }
};

const cargarCategoriasYSubcategorias = async () => {
    try {
        const response = await obtenerCategoriasAnalisis();
        categoriasAnalisis.value = response.data;
        categoriasAnalisis.value.forEach(categoria => {
            selectedSubcategoriasPorCategoria.value[categoria.id_categoria_analisis] = [];
        });
        for (let categoria of categoriasAnalisis.value) {
            const resSubcategorias = await obtenerSubcategoriasPorCategoria(categoria.id_categoria_analisis);
            const subcategorias = resSubcategorias.data.map(s => ({
                ...s,
                name: s.nombre_subcategoria,
                value: s.id_subcategoria_analisis,
            }));
            subcategoriasPorCategoria.value[categoria.id_categoria_analisis] = subcategorias;
            subcategorias.forEach(subcategoria => {
                subcategoriasMap.value[subcategoria.id_subcategoria_analisis] = subcategoria;
            });
        }
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar categorías y subcategorías', life: 3000 });
    }
};

const cargarSolicitudesAnalisis = async (id_historia_clinica) => {
    try {
        const response = await obtenerSolicitudesAnalisisPorHistoriaClinica(id_historia_clinica);
        const data = response.data;
        data.forEach(sa => {
            const categoriaId = sa.id_categoria_analisis;
            analisisDetails.value[categoriaId] = {
                id_solicitud_analisis: sa.id_solicitud_analisis,
                puntaje_analisis: sa.puntaje_analisis,
                feed_analisis: sa.feed_analsis,
                detalles: {},
            };
            selectedSubcategoriasPorCategoria.value[categoriaId] = [];
            if (sa.detalles && sa.detalles.length > 0) {
                sa.detalles.forEach(detalle => {
                    selectedSubcategoriasPorCategoria.value[categoriaId].push(detalle.id_subcategoria_analisis);
                    analisisDetails.value[categoriaId].detalles[detalle.id_subcategoria_analisis] = {
                        id_detalle_subanalisis: detalle.id_detalle_subanalisis,
                        resultado: detalle.resultado,
                        nombre_subcategoria: detalle.nombre_subcategoria,
                    };
                });
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar solicitudes de análisis', life: 3000 });
    }
};

watchEffect(() => {
    for (let categoriaId in selectedSubcategoriasPorCategoria.value) {
        const selectedIds = selectedSubcategoriasPorCategoria.value[categoriaId];
        if (!analisisDetails.value[categoriaId]) {
            analisisDetails.value[categoriaId] = {
                id_solicitud_analisis: null,
                puntaje_analisis: null,
                feed_analisis: '',
                detalles: {},
            };
        }
        const detalles = analisisDetails.value[categoriaId].detalles;
        selectedIds.forEach(subcatId => {
            if (!detalles[subcatId]) {
                detalles[subcatId] = {
                    id_detalle_subanalisis: null,
                    resultado: '',
                    nombre_subcategoria: subcategoriasMap.value[subcatId]?.nombre_subcategoria || '',
                };
            }
        });
        for (let subcatId in detalles) {
            if (!selectedIds.includes(parseInt(subcatId))) {
                delete detalles[subcatId];
            }
        }
    }
});




onMounted(() => {
    cargarCasosClinicos();
});

const cargarPuntajeImagenologia = async (id_historia_clinica) => {
    try {
        const response = await obtenerPuntaje(id_historia_clinica);
        scoreImagenologia.value = response.data.map(item => ({
            name: `${item.codigo}: ${item.valor}`, value: item.codigo
        }));
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener puntajes', life: 3000 });
    }
};

const cargarCategoriasImagenologia = async () => {
    try {
        const response = await obtenerCategoriasConImagenologias();
        categoriasImagenologia.value = response.data;
        categoriasImagenologia.value.forEach(category => {
            if (!selectedImagenologiasByCategory[category.id_categoria_imagenologia]) {
                selectedImagenologiasByCategory[category.id_categoria_imagenologia] = [];
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener categorías de imagenología', life: 3000 });
    }
};

const cargarEstudiosImagenes = async (id_historia_clinica) => {
    try {
        const response = await obtenerEstudiosImagenologiaPorHistoriaClinica(id_historia_clinica);
        const estudios = response.data;
        imagenesData.value = estudios.map(estudio => ({
            id_estudios_imagenologia: estudio.id_estudios_imagenologia,
            id_imagenologia: estudio.id_imagenologia,
            nombre: estudio.imagenologia_nombre,
            categoria_nombre: estudio.categoria_nombre,
            interpretacion: estudio.interpretacion,
            path: estudio.path,
            feed_estudios_imagenologia: estudio.feed_estudios_imagenologia,
            puntaje_estudios_imagenologia: estudio.puntaje_estudios_imagenologia
        }));

        estudios.forEach(estudio => {
            const categoryId = categoriasImagenologia.value.find(category => category.nombre === estudio.categoria_nombre)?.id_categoria_imagenologia;
            if (categoryId) {
                if (!selectedImagenologiasByCategory[categoryId]) {
                    selectedImagenologiasByCategory[categoryId] = [];
                }
                if (!selectedImagenologiasByCategory[categoryId].includes(estudio.id_imagenologia)) {
                    selectedImagenologiasByCategory[categoryId].push(estudio.id_imagenologia);
                }
            }
        });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener estudios de imagenología', life: 3000 });
    }
};

// eslint-disable-next-line no-unused-vars
const onImagenologiaSelectionChange = (categoryId) => {
    const selectedIds = Object.values(selectedImagenologiasByCategory).flat();

    const previousIds = imagenesData.value.map(img => img.id_imagenologia);

    const addedIds = selectedIds.filter(id => !previousIds.includes(id));
    const removedIds = previousIds.filter(id => !selectedIds.includes(id));

    addedIds.forEach(id_imagenologia => {
        const imagenologia = categoriasImagenologia.value.flatMap(cat => cat.imagenologias)
            .find(img => img.id_imagenologia === id_imagenologia);
        if (imagenologia) {
            const category = categoriasImagenologia.value.find(cat => cat.imagenologias.some(img => img.id_imagenologia === id_imagenologia));
            imagenesData.value.push({
                id_estudios_imagenologia: null,
                id_imagenologia: id_imagenologia,
                nombre: imagenologia.nombre,
                categoria_nombre: category.nombre,
                interpretacion: '',
                path: '',
                feed_estudios_imagenologia: '',
                puntaje_estudios_imagenologia: ''
            });
        }
    });

    removedIds.forEach(id_imagenologia => {
        const index = imagenesData.value.findIndex(img => img.id_imagenologia === id_imagenologia);
        if (index !== -1) {
            imagenesData.value.splice(index, 1);
        }
    });
};

const onUpload = async (event, index) => {
    const file = event.files[0];
    const formData = new FormData();
    let categoria = imagenesData.value[index].categoria_nombre + "-" + imagenesData.value[index].nombre
    console.log(categoria)
    console.log(imagenesData.value[index])
    formData.append('imagen', file);
    formData.append('id_imagenologia', categoria);

    try {
        const response = await cargarImagenCategoria(formData);
        imagenesData.value[index].path = response.data.path;
        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Imagen cargada correctamente', life: 3000 });
    } catch (error) {
        console.log(error);
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al cargar la imagen', life: 3000 });
    }
};


function contarPuntajesImagenologia(imagenesData) {
    let puntajeCount = { A: 0, B: 0, C: 0, D: 0, E: 0 };

    imagenesData.forEach(imagen => {
        const puntaje = imagen.puntaje_estudios_imagenologia;
        // eslint-disable-next-line no-prototype-builtins
        if (puntaje && puntajeCount.hasOwnProperty(puntaje)) {
            puntajeCount[puntaje]++;
        }
    });

    return {
        puntaje_a: puntajeCount.A || 0,
        puntaje_b: puntajeCount.B || 0,
        puntaje_c: puntajeCount.C || 0,
        puntaje_d: puntajeCount.D || 0,
        puntaje_e: puntajeCount.E || 0
    };
}

function contarPuntajesAnalisis(analisisDetails) {
    let puntajeCount = { A: 0, B: 0, C: 0, D: 0, E: 0 };

    for (let categoriaId in analisisDetails) {
        const puntaje = analisisDetails[categoriaId].puntaje_analisis;
        // eslint-disable-next-line no-prototype-builtins
        if (puntaje && puntajeCount.hasOwnProperty(puntaje)) {
            puntajeCount[puntaje]++;
        }
    }

    return {
        puntaje_a: puntajeCount.A || 0,
        puntaje_b: puntajeCount.B || 0,
        puntaje_c: puntajeCount.C || 0,
        puntaje_d: puntajeCount.D || 0,
        puntaje_e: puntajeCount.E || 0
    };
}

function sumarPuntajes(puntajes1, puntajes2) {
    return {
        puntaje_a: (puntajes1.puntaje_a || 0) + (puntajes2.puntaje_a || 0),
        puntaje_b: (puntajes1.puntaje_b || 0) + (puntajes2.puntaje_b || 0),
        puntaje_c: (puntajes1.puntaje_c || 0) + (puntajes2.puntaje_c || 0),
        puntaje_d: (puntajes1.puntaje_d || 0) + (puntajes2.puntaje_d || 0),
        puntaje_e: (puntajes1.puntaje_e || 0) + (puntajes2.puntaje_e || 0)
    };
}

function prepararDatosAnalisis() {
    const data = [];
    for (let categoriaId in analisisDetails.value) {
        const analisis = analisisDetails.value[categoriaId];
        const detallesArray = [];
        for (let subcatId in analisis.detalles) {
            detallesArray.push({
                id_subcategoria_analisis: subcatId,
                resultado: analisis.detalles[subcatId].resultado,
            });
        }
        data.push({
            id_categoria_analisis: categoriaId,
            puntaje_analisis: analisis.puntaje_analisis,
            feed_analsis: analisis.feed_analisis,
            detalles: detallesArray,
        });
    }
    return data;
}

const guardarTodosLosCambiosLaboratorio = async () => {
    try {
        // Guardar cambios de imagenología
        await actualizarEstudiosImagenologia(casoSeleccionado.value.id_historia_clinica, imagenesData.value);

        // Guardar cambios de análisis

        await actualizarSolicitudesAnalisis(casoSeleccionado.value.id_historia_clinica, prepararDatosAnalisis());

        // Contar puntajes de imagenología
        let puntajesImagenologia = contarPuntajesImagenologia(imagenesData.value);
        console.log("puntajeeeImagenologia: ", puntajesImagenologia)

        // Contar puntajes de análisis
        let puntajesAnalisis = contarPuntajesAnalisis(analisisDetails.value);
        console.log("puntajeeeAnalisis: ", puntajesAnalisis)

        // Sumar puntajes
        let puntajesTotales = sumarPuntajes(puntajesImagenologia, puntajesAnalisis);
        console.log("puntajeeeTotales: ", puntajesTotales)

        // Actualizar puntaje en la base de datos
        await actualizarPuntajeLaboratorio(casoSeleccionado.value.id_historia_clinica, puntajesTotales);

        toast.add({ severity: 'success', summary: 'Éxito', detail: 'Laboratorio actualizado correctamente', life: 3000 });
    } catch (error) {
        console.error(error);
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al actualizar el laboratorio', life: 3000 });
    }
};
</script>

<template>
    <div class="grid">
        <div v-for="caso in casosClinicos" :key="caso.id_caso_clinico" class="col md:col-4">
            <Card style="overflow: hidden">
                <template #title>Caso N° {{ caso.id_caso_clinico }}</template>
                <template #subtitle>Autor: {{ caso.autor }}</template>
                <template #content>
                    <div class="grid">
                        <div class="col md:col-12 capitalize"><strong>Nombre: </strong>{{ caso.nombre }} {{ caso.paterno
                            }} {{
                                caso.materno }}</div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-4"><strong>Peso: </strong>{{ caso.peso }} kg</div>
                        <div class="col md:col-4"><strong>Talla: </strong>{{ caso.talla }} m</div>
                        <div class="col md:col-4 capitalize"><strong>Sexo: </strong>{{ caso.sexo }}</div>
                    </div>
                    <p class="m-0 text-justify">
                        {{ caso.descripcion }}
                    </p>
                    <div class="grid pt-2">
                        <div class="col md:col-12"><strong>Categoría: </strong>
                            <Tag :value="caso.categoria" severity="info" />
                        </div>
                    </div>
                    <div class="grid">
                        <div class="col md:col-12"><strong>Dificultad: </strong>
                            <Tag :value="caso.difucultad" :severity="getDificultadSeverity(caso.difucultad)" />
                        </div>
                    </div>
                </template>
                <template #footer>
                    <div class="flex gap-3 mt-1">
                        <Button :label="caso.estado === 'deshabilitado' ? 'Habilitar' : 'Deshabilitar'"
                            @click="toggleEstadoCaso(caso)"
                            :severity="caso.estado === 'deshabilitado' ? 'contrast' : 'danger'" class="w-full" />
                        <Button label="Ver" class="w-full" @click="mostrarDetalleCaso(caso.id_caso_clinico)" />
                    </div>
                </template>
            </Card>
        </div>
        <Dialog v-model:visible="visible" modal header="Ver caso clínico" :style="{ width: '65rem' }">
            <div class="justify-content-center">
                <h5>Selecciona los análisis para el caso</h5>

                <div v-for="categoria in categoriasAnalisis" :key="categoria.id_categoria_analisis" class="pt-4">
                    <div class="grid">
                        <Divider align="center" type="solid">
                            <h5>{{ categoria.nombre_categoria }}</h5>
                        </Divider>
                    </div>
                    <div class="card flex justify-content-center">
                        <SelectButton v-model="selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis]"
                            :options="subcategoriasPorCategoria[categoria.id_categoria_analisis]" optionLabel="name"
                            optionValue="value" multiple aria-labelledby="multiple" />
                    </div>


                    <div v-if="selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis].length > 0">
                        <div class="grid pt-3">
                            <div class="col md:col-6">
                                <FloatLabel>
                                    <Textarea v-model="analisisDetails[categoria.id_categoria_analisis].feed_analisis"
                                        autoResize rows="3" cols="30" />
                                    <label for="feed_analisis">Retroalimentación</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-3">
                                <FloatLabel>
                                    <Dropdown
                                        v-model="analisisDetails[categoria.id_categoria_analisis].puntaje_analisis"
                                        :options="scoreAnalisis" optionLabel="name" optionValue="value"
                                        placeholder="Elige una opción" checkmark :highlightOnSelect="false"
                                        class="w-full md:w-14rem" />
                                    <label for="puntaje_analisis">Puntaje Asignado</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-3"></div>
                        </div>

                        <!-- Mostrar campos para cada subcategoría seleccionada -->
                        <div v-for="subcatId in selectedSubcategoriasPorCategoria[categoria.id_categoria_analisis]"
                            :key="subcatId" class="grid pt-3">
                            <div class="col md:col-4">
                                <h6>{{
                                    analisisDetails[categoria.id_categoria_analisis].detalles[subcatId].nombre_subcategoria
                                }}</h6>
                            </div>
                            <div class="col md:col-4">
                                <FloatLabel>
                                    <InputText
                                        v-model="analisisDetails[categoria.id_categoria_analisis].detalles[subcatId].resultado" />
                                    <label for="resultado">Resultado</label>
                                </FloatLabel>
                            </div>
                            <div class="col md:col-4"></div>
                        </div>
                    </div>
                </div>

            </div>

            <div class="justify-content-center pt-3">
                <h5>Selecciona las imagenologías para el caso</h5>
                <div v-for="category in categoriasImagenologia" :key="category.id_categoria_imagenologia" class="mt-4">
                    <Divider align="center" type="solid">
                        <h5>{{ category.nombre }}</h5>
                    </Divider>
                    <div class="card text-center">
                        <SelectButton v-model="selectedImagenologiasByCategory[category.id_categoria_imagenologia]"
                            :options="category.imagenologias" optionLabel="nombre" optionValue="id_imagenologia"
                            multiple @change="onImagenologiaSelectionChange(category.id_categoria_imagenologia)" />
                    </div>
                </div>

                <Divider />
                <div v-for="(imgData, index) in imagenesData" :key="imgData.id_imagenologia" class="mt-4">
                    <h5>{{ imgData.categoria_nombre }} - {{ imgData.nombre }}</h5>
                    <div class="grid p-fluid">
                        <div class="col md:col-5">
                            <FileUpload name="imagen" accept="image/*" :auto="true" :customUpload="true"
                                :maxFileSize="1000000" chooseLabel="Elegir Imagen" :showCancelButton="false"
                                :showUploadButton="false" @select="(event) => onUpload(event, index)">
                                <template #content>
                                    <div v-if="imgData.path">
                                        <img :src="imgData.path" alt="Imagen" width="200" />
                                    </div>
                                    <div v-else>
                                        <p>Elige y arrastra una imagen.</p>
                                    </div>
                                </template>
                            </FileUpload>
                        </div>
                        <div class="col md:col-4">
                            <div class="grid">
                                <div class="col md:col-12">
                                    <FloatLabel>
                                        <Textarea v-model="imgData.interpretacion" autoResize rows="3" cols="30" />
                                        <label for="interpretacion">Interpretación</label>
                                    </FloatLabel>
                                </div>
                                <div class="col md:col-12 pt-3">
                                    <FloatLabel>
                                        <Textarea v-model="imgData.feed_estudios_imagenologia" autoResize rows="3"
                                            cols="30" />
                                        <label for="feed_estudios_imagenologia">Retroalimentación</label>
                                    </FloatLabel>
                                </div>
                            </div>
                        </div>
                        <div class="col md:col-3">
                            <FloatLabel>
                                <Dropdown v-model="imgData.puntaje_estudios_imagenologia" :options="scoreImagenologia"
                                    optionLabel="name" optionValue="value" placeholder="Elige una opción" checkmark
                                    :highlightOnSelect="false" class="w-full md:w-14rem" />
                                <label for="puntaje_estudios_imagenologia">Puntaje Asignado</label>
                            </FloatLabel>
                        </div>
                    </div>
                </div>

                <div class="flex py-4 gap-2">
                    <!-- Botones de navegación si los tienes -->
                    <Button label="Guardar" @click="guardarTodosLosCambiosLaboratorio" />
                </div>

                <div class="flex justify-content-end gap-2">
                    <Button type="button" label="Cancelar" severity="secondary" @click=cerrarDialogo></Button>
                    <Button type="button" label="Guardar" @click="guardarTodosLosCambiosLaboratorio"></Button>
                </div>
            </div>

        </Dialog>
    </div>
</template>





















<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted, computed } from 'vue';
import { useRouter } from 'vue-router';
import { useToast } from 'primevue/usetoast';
import { registrarAccion } from '@/services/simulacionService';
import { useStore } from 'vuex';
import {
    getExamenFisicoOrina, getExamenSedimentoUrinario, getExamenQuimicoUrinario,
    getExamenBiometriaHematica, getExamenRecuentoDiferencialHematico,
    getExamenIndiceEritrocitario, getExamenQuimicoSanguineo,
    getExamenHemostaseaSanguinea, getExamenSerologiaSanguinea, getExamenEspecialOrina,
    getExamenElectrolitosSanguineos
} from '@/services/historiaService';

const display = ref(true);
const router = useRouter();
const toast = useToast();
const position = ref('right');

const id_simulacion = localStorage.getItem('id_simulacion');
const id_historia_clinica = localStorage.getItem('id_historia_clinica');
const store = useStore();

const examenOrina = ref(store.getters['laboratorios/examenOrina']);
const examenSedimento = ref(store.getters['laboratorios/examenSedimento']);
const examenQuimicoUrinario = ref(store.getters['laboratorios/examenQuimicoUrinario']);
const examenEspecialOrina = ref(store.getters['laboratorios/examenEspecialOrina']);
const examenBiometriaHematica = ref(store.getters['laboratorios/examenBiometriaHematica']);
const examenRecuentoDiferencial = ref(store.getters['laboratorios/examenRecuentoDiferencial']);
const examenIndiceEritrocitario = ref(store.getters['laboratorios/examenIndiceEritrocitario']);
const examenQuimicoSanguineo = ref(store.getters['laboratorios/examenQuimicoSanguineo']);
const examenHemostasea = ref(store.getters['laboratorios/examenHemostasea']);
const examenSerologia = ref(store.getters['laboratorios/examenSerologia']);
const examenElectrolitos = ref(store.getters['laboratorios/examenElectrolitos']);

const imagenologias = computed(() => store.getters['imagenologia/imagenologias']);
const selectedCategories = computed(() => store.getters['imagenologia/selectedCategories']);

const loadingCategories = ref({});


const loadingStates = ref({
    orina: false,
    sedimento: false,
    quimico_urinario: false,
    especial_orina: false,
    biometria_hematica: false,
    recuento_diferencial: false,
    indice_eritrocitario: false,
    quimico_sanguineo: false,
    hemostasea: false,
    serologia: false,
    electrolitos: false
});

const registrarAccionSimulacion = async (descripcion, rubrica, puntaje, retroalimentacion) => {
    try {
        const accionData = {
            id_simulacion: id_simulacion,
            descripcion: descripcion,
            tipo_accion: rubrica,
            puntaje: puntaje,
            retroalimentacion: retroalimentacion
        };
        await registrarAccion(accionData);
        toast.add({ severity: 'info', summary: `Laboratorio realizado.`, detail: `${accionData.retroalimentacion}`, life: 3000 });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al registrar la acción', life: 3000 });
        console.error('Error al registrar la acción:', error);
    }
};

const registrarAccionSimulacionImagenologia = async (descripcion, rubrica, puntaje, retroalimentacion) => {
    try {
        const accionData = {
            id_simulacion: id_simulacion,
            descripcion: descripcion,
            tipo_accion: rubrica,
            puntaje: puntaje,
            retroalimentacion: retroalimentacion
        };
        await registrarAccion(accionData);
        toast.add({ severity: 'info', summary: `Imagenologia solicitada.`, detail: `${accionData.retroalimentacion}`, life: 3000 });
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al registrar la acción', life: 3000 });
        console.error('Error al registrar la acción:', error);
    }
};

function closeDialog() {
    display.value = false;
    router.push('/app');
}

function onDialogHide() {
    if (!display.value) {
        router.push('/app');
    }
}

const fetchExamenData = async (type) => {
    const id_historia_clinica = localStorage.getItem('id_historia_clinica');
    if (!id_historia_clinica) {
        toast.error('ID de historia clínica no encontrado en el localStorage');
        return;
    }
    try {
        let response;
        loadingStates.value[type] = true;
        switch (type) {
            case 'orina':
                response = await getExamenFisicoOrina(id_historia_clinica);
                console.log(response.data[0])
                store.dispatch('laboratorios/saveExamenOrina', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio de orina', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'sedimento':
                response = await getExamenSedimentoUrinario(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenSedimento', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio de sedimento urinario', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'quimico_urinario':
                response = await getExamenQuimicoUrinario(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenQuimicoUrinario', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio químico urinario', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'especial_orina':
                response = await getExamenEspecialOrina(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenEspecialOrina', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio especial de orina', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'biometria_hematica':
                response = await getExamenBiometriaHematica(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenBiometriaHematica', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio de biometria hematica', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'recuento_diferencial':
                response = await getExamenRecuentoDiferencialHematico(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenRecuentoDiferencial', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio de recuento diferencial hematico', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'indice_eritrocitario':
                response = await getExamenIndiceEritrocitario(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenIndiceEritrocitario', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio de indice eritrocitario hemático', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'quimico_sanguineo':
                response = await getExamenQuimicoSanguineo(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenQuimicoSanguineo', response.data[0])
                break;
            case 'hemostasea':
                response = await getExamenHemostaseaSanguinea(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenHemostasea', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio de hemostasea sanguinea', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'serologia':
                response = await getExamenSerologiaSanguinea(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenSerologia', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio de serologia sanguinea', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            case 'electrolitos':
                response = await getExamenElectrolitosSanguineos(id_historia_clinica);
                store.dispatch('laboratorios/saveExamenElectrolitos', response.data[0])
                await registrarAccionSimulacion('Se  realizo el laboratorio de electrolitos sanguineos', response.data[0].rubrica, response.data[0].puntaje, response.data[0].feed);
                break;
            default:
                throw new Error('Unknown exam type');
        }
        setTimeout(() => {
            eval(`examen${type.charAt(0).toUpperCase() + type.slice(1).replace(/_([a-z])/g, g => g[1].toUpperCase())}`).value = response.data[0];
            loadingStates.value[type] = false;
        }, 2000);
    } catch (error) {
        toast.error(`Error al cargar los datos del examen ${type}`);
        console.error(error);
        loadingStates.value[type] = false;
    }
};

const fetchImagenologias = async () => {
    try {
        await store.dispatch('imagenologia/fetchImagenologias', id_historia_clinica);
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'Error al obtener imagenologías', life: 3000 });
        console.error('Error al obtener imagenologías:', error);
    }
};

onMounted(() => {
    fetchImagenologias();
});

function realizarCategoria(categoryName) {

    if (selectedCategories.value.includes(categoryName) || loadingCategories.value[categoryName]) {
        return;
    }

    loadingCategories.value[categoryName] = true;

    const imagenologia = imagenologias.value[categoryName];
    console.log(imagenologia)
    const rubrica = imagenologia.rubrica;
    const puntaje = imagenologia.puntaje;
    const retroalimentacion = imagenologia.feed;

    registrarAccionSimulacionImagenologia(`Se solicito ${categoryName}`, rubrica, puntaje, retroalimentacion);

    setTimeout(() => {
        store.dispatch('imagenologia/realizarCategoria', categoryName);
        loadingCategories.value[categoryName] = false;
    }, 2000);
}
</script>

<template>
    <Dialog header="Investigar" v-model:visible="display" :style="{ width: '45vw', height: '100%' }" :modal="true"
        @hide="onDialogHide" class="p-fluid" :position="position" :draggable="false">
        <Accordion>
            <AccordionTab header="Laboratorios Disponibles">
                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio de orina</strong></div>
                    <div class="col md:col-4"> <Button v-if="!examenOrina && !loadingStates.orina" label="Realizar"
                            @click="() => fetchExamenData('orina')" />
                        <Button v-if="loadingStates.orina" label="Obteniendo..." icon="pi pi-spin pi-spinner"
                            disabled />
                    </div>
                </div>
                <template v-if="examenOrina">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Color: </strong> {{ examenOrina.color }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Aspecto: </strong> {{ examenOrina.aspecto }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Volumen: </strong> {{ examenOrina.volumen }}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>

                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio de Sedimento Urinario</strong></div>
                    <div class="col md:col-4"> <Button v-if="!examenSedimento && !loadingStates.sedimento"
                            label="Realizar" @click="() => fetchExamenData('sedimento')" />
                        <Button v-if="loadingStates.sedimento" label="Obteniendo..." icon="pi pi-spin pi-spinner"
                            disabled />
                    </div>
                </div>

                <template v-if="examenSedimento">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Hematies: </strong> {{ examenSedimento.hematies }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Leucocitos: </strong> {{ examenSedimento.leucocitos }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Piocitos: </strong> {{ examenSedimento.piocitos }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Células Epiteliales: </strong> {{ examenSedimento.celulas_epiteliales }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Células Renales: </strong> {{ examenSedimento.celulas_renales }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Cilindro Cereo: </strong> {{ examenSedimento.cilindro_cereo }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Cilindros Hialianos: </strong> {{ examenSedimento.cilindros_hialianos }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Cilindros Granulosos: </strong> {{ examenSedimento.cilindros_granulosos
                                        }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Cilindros Leucocitarios: </strong> {{
                                        examenSedimento.cilindros_leucocitarios }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Cilindros Eritrocitarios: </strong> {{
                                        examenSedimento.cilindros_eritrocitarios }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Flora Bacteriana: </strong> {{ examenSedimento.flora_bacteriana }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Cristales: </strong> {{ examenSedimento.cristales }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Filamento Mucoso: </strong> {{ examenSedimento.filamento_mucoso }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Hifas: </strong> {{ examenSedimento.hifas }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Levaduras: </strong> {{ examenSedimento.levaduras }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Otros: </strong> {{ examenSedimento.otros }}</p>
                                </div>
                                <div class="col md:col-4"> </div>
                                <div class="col md:col-4"> </div>
                            </div>
                        </div>
                    </div>
                </template>

                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio Químico Urinario</strong></div>
                    <div class="col md:col-4"> <Button v-if="!examenQuimicoUrinario && !loadingStates.quimico_urinario"
                            label="Realizar" @click="() => fetchExamenData('quimico_urinario')" />
                        <Button v-if="loadingStates.quimico_urinario" label="Obteniendo..." icon="pi pi-spin pi-spinner"
                            disabled />
                    </div>
                </div>

                <template v-if="examenQuimicoUrinario">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Ph: </strong> {{ examenQuimicoUrinario.ph }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Densidad: </strong> {{ examenQuimicoUrinario.densidad }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Proteinas: </strong> {{ examenQuimicoUrinario.proteinas }}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Sangre: </strong> {{ examenQuimicoUrinario.sangre }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Glucosa: </strong> {{ examenQuimicoUrinario.glucosa }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Cetonas: </strong> {{ examenQuimicoUrinario.cetonas }}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Urobilinogeno: </strong> {{ examenQuimicoUrinario.urobilinogeno }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Bilirrubina: </strong> {{ examenQuimicoUrinario.bilirrubina }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Pigmentos Biliares: </strong> {{ examenQuimicoUrinario.pigmentos_biliares
                                        }}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Nitritos: </strong> {{ examenQuimicoUrinario.nitritos }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Leucocitos: </strong> {{ examenQuimicoUrinario.leucocitos }}</p>
                                </div>
                                <div class="col md:col-4">
                                </div>
                            </div>
                        </div>
                    </div>
                </template>

                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio Especial de Orina</strong></div>
                    <div class="col md:col-4"> <Button v-if="!examenEspecialOrina && !loadingStates.especial_orina"
                            label="Realizar" @click="() => fetchExamenData('especial_orina')" />
                        <Button v-if="loadingStates.especial_orina" label="Obteniendo..." icon="pi pi-spin pi-spinner"
                            disabled />
                    </div>
                </div>

                <template v-if="examenEspecialOrina">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Proteurinaria: </strong> {{ examenEspecialOrina.proteurinaria }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Creatinuria: </strong> {{ examenEspecialOrina.creatinuria }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Microalbuminuria: </strong> {{ examenEspecialOrina.microalbuminuria }}
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Clearence Creatinina: </strong> {{
                                        examenEspecialOrina.clearence_creatinina }}</p>
                                </div>
                                <div class="col md:col-4">

                                </div>
                                <div class="col md:col-4">
                                </div>
                            </div>
                        </div>
                    </div>
                </template>

                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio de Biometria Hemática</strong></div>
                    <div class="col md:col-4"> <Button
                            v-if="!examenBiometriaHematica && !loadingStates.biometria_hematica" label="Realizar"
                            @click="() => fetchExamenData('biometria_hematica')" />
                        <Button v-if="loadingStates.biometria_hematica" label="Obteniendo..."
                            icon="pi pi-spin pi-spinner" disabled />
                    </div>
                    <div class="col md:col-4"></div>
                </div>

                <template v-if="examenBiometriaHematica">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Globulos Rojos: </strong> {{ examenBiometriaHematica.globulos_rojos }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Globulos Blancos: </strong> {{ examenBiometriaHematica.globulos_blancos
                                        }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Hemoglobina: </strong> {{ examenBiometriaHematica.hemoglobina }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Heritrocito: </strong> {{ examenBiometriaHematica.hematocrito }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>VES: </strong> {{ examenBiometriaHematica.ves }}
                                    </p>
                                </div>
                                <div class="col md:col-4">

                                </div>
                            </div>
                        </div>
                    </div>
                </template>


                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio Recuento Diferencial Hematico</strong>
                    </div>
                    <div class="col md:col-4"> <Button
                            v-if="!examenRecuentoDiferencial && !loadingStates.recuento_diferencial" label="Realizar"
                            @click="() => fetchExamenData('recuento_diferencial')" />
                        <Button v-if="loadingStates.recuento_diferencial" label="Obteniendo..."
                            icon="pi pi-spin pi-spinner" disabled />
                    </div>
                </div>

                <template v-if="examenRecuentoDiferencial">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Cayados Relativo: </strong> {{ examenRecuentoDiferencial.cayados_relativo
                                        }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Cayados Absoluto: </strong> {{ examenRecuentoDiferencial.cayados_absoluto
                                        }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Linfocitos Relativo: </strong> {{
                                        examenRecuentoDiferencial.linfocitos_relativo }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Linfositos Absolutos: </strong> {{
                                        examenRecuentoDiferencial.linfocitos_absoluto }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Eosinofilos Relativo: </strong> {{
                                        examenRecuentoDiferencial.eosinofilos_relativo }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Eosinofilos Absoluto: </strong> {{
                                        examenRecuentoDiferencial.eosinofilos_absoluto }}
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Basofilos Relativo: </strong> {{
                                        examenRecuentoDiferencial.basofilos_relativo }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Basofilos Absoluto: </strong> {{
                                        examenRecuentoDiferencial.basofilos_absoluto }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Segmentados Relativo: </strong> {{
                                        examenRecuentoDiferencial.segmentados_relativo }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Segmentados Absoluto: </strong> {{
                                        examenRecuentoDiferencial.segmentados_absoluto }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Monocitos Relativo: </strong> {{
                                        examenRecuentoDiferencial.monocitos_relativo
                                    }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Monocitos Absoluto: </strong> {{
                                        examenRecuentoDiferencial.monocitos_absoluto }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Recuendo Plaquetas: </strong> {{
                                        examenRecuentoDiferencial.recuento_plaquetas
                                    }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Recuento Reticulos: </strong> {{
                                        examenRecuentoDiferencial.recuento_reticulos }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>


                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio Indice Eritrocitario Hematico</strong>
                    </div>
                    <div class="col md:col-4"> <Button
                            v-if="!examenIndiceEritrocitario && !loadingStates.indice_eritrocitario" label="Realizar"
                            @click="() => fetchExamenData('indice_eritrocitario')" />
                        <Button v-if="loadingStates.indice_eritrocitario" label="Obteniendo..."
                            icon="pi pi-spin pi-spinner" disabled />
                    </div>
                </div>

                <template v-if="examenIndiceEritrocitario">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>VCM: </strong> {{ examenIndiceEritrocitario.vcm }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>HBCM: </strong> {{ examenIndiceEritrocitario.hbcm }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>CHBCM: </strong> {{ examenIndiceEritrocitario.chbcm }}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>


                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio Químico Sanguineo</strong>
                    </div>
                    <div class="col md:col-4"> <Button
                            v-if="!examenQuimicoSanguineo && !loadingStates.quimico_sanguineo" label="Realizar"
                            @click="() => fetchExamenData('quimico_sanguineo')" />
                        <Button v-if="loadingStates.quimico_sanguineo" label="Obteniendo..."
                            icon="pi pi-spin pi-spinner" disabled />
                    </div>
                </div>

                <template v-if="examenQuimicoSanguineo">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Glicemmia: </strong> {{ examenQuimicoSanguineo.glicemia
                                        }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Creatinina: </strong> {{ examenQuimicoSanguineo.creatinina
                                        }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Urea: </strong> {{
                                        examenQuimicoSanguineo.nitrogeno_ureico }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Acido Urico: </strong> {{
                                        examenQuimicoSanguineo.acido_urico }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Bilirrubina Total: </strong> {{
                                        examenQuimicoSanguineo.bilirrubina_total }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Bilirrubina Directa: </strong> {{
                                        examenQuimicoSanguineo.bilirrubina_directa }}
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Bilirrubina Indirecta: </strong> {{
                                        examenQuimicoSanguineo.bilirrubina_indirecta }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Transaminasa GPT: </strong> {{
                                        examenQuimicoSanguineo.transaminasa_gpt }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Transaminasa GOT: </strong> {{
                                        examenQuimicoSanguineo.transaminasa_got }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Lactato Deshdrogenasa: </strong> {{
                                        examenQuimicoSanguineo.lactato_deshidrogenasa }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Fosfatasa Alcalina: </strong> {{
                                        examenQuimicoSanguineo.fosfatasa_alcalina
                                    }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Proteinas Totales: </strong> {{
                                        examenQuimicoSanguineo.proteinas_totales }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Albumina: </strong> {{
                                        examenQuimicoSanguineo.albumina
                                    }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Globulina: </strong> {{
                                        examenQuimicoSanguineo.globulina }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Relación ALB/GLO: </strong> {{
                                        examenQuimicoSanguineo.relacion_alb_glo }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Colesterol Total: </strong> {{
                                        examenQuimicoSanguineo.colesterol_total }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Trigliceridos: </strong> {{
                                        examenQuimicoSanguineo.trigliceridos
                                    }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>HDL Colesterol: </strong> {{
                                        examenQuimicoSanguineo.hdl_colesterol }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>LDL Colesterol: </strong> {{
                                        examenQuimicoSanguineo.ldl_colesterol
                                    }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>VLDL Colesterol: </strong> {{
                                        examenQuimicoSanguineo.vldl_colesterol }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Glicemia RN: </strong> {{
                                        examenQuimicoSanguineo.glicemia_rn }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Hemoglobina Glicosilada: </strong> {{
                                        examenQuimicoSanguineo.hemoglobina_glicosilada
                                    }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Nitrogeno Ureico: </strong> {{
                                        examenQuimicoSanguineo.nitrogeno_ureico }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>


                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio Hemostasea Sanguinea</strong>
                    </div>
                    <div class="col md:col-4"> <Button v-if="!examenHemostasea && !loadingStates.hemostasea"
                            label="Realizar" @click="() => fetchExamenData('hemostasea')" />
                        <Button v-if="loadingStates.hemostasea" label="Obteniendo..." icon="pi pi-spin pi-spinner"
                            disabled />
                    </div>
                </div>

                <template v-if="examenHemostasea">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Tiempo de Coagulación: </strong> {{ examenHemostasea.tiempo_coagulacion
                                        }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Tiempo de Sangria: </strong> {{ examenHemostasea.tiempo_sangria }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Tiempo Protrombina: </strong> {{ examenHemostasea.tiempo_protrombina }}
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Actividad Protrombinica: </strong> {{
                                        examenHemostasea.actividad_protrombinica }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>INR: </strong> {{
                                        examenHemostasea.inr }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Tiempo de Control: </strong> {{
                                        examenHemostasea.tiempo_control }}
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Tiempo Tromboplasitna Parcial: </strong> {{
                                        examenHemostasea.tiempo_tromboplastina_parcial }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Dimero D: </strong> {{
                                        examenHemostasea.dimero_d }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Fibrinogeno: </strong> {{
                                        examenHemostasea.fibrinogeno }}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>


                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio Serologia Sanguinea</strong>
                    </div>
                    <div class="col md:col-4"> <Button v-if="!examenSerologia && !loadingStates.serologia"
                            label="Realizar" @click="() => fetchExamenData('serologia')" />
                        <Button v-if="loadingStates.serologia" label="Obteniendo..." icon="pi pi-spin pi-spinner"
                            disabled />
                    </div>
                </div>

                <template v-if="examenSerologia">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Proteina C: </strong> {{ examenSerologia.proteina_c }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Factor Reumático: </strong> {{ examenSerologia.factor_reumatico }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>RPR Sifilis: </strong> {{ examenSerologia.rpr_sifilis }}
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Prueba Sifilis: </strong> {{
                                        examenSerologia.prueba_sifilis }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>VIH SIDA: </strong> {{
                                        examenSerologia.prueba_vih_sida }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Hepatitis B: </strong> {{
                                        examenSerologia.prueba_hepatitis_b }}
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>


                <div class="grid">
                    <div class="col md:col-8 text-lg pt-3"><strong>Laboratorio Electrolitos Sanguineos</strong>
                    </div>
                    <div class="col md:col-4"> <Button v-if="!examenElectrolitos && !loadingStates.electrolitos"
                            label="Realizar" @click="() => fetchExamenData('electrolitos')" />
                        <Button v-if="loadingStates.electrolitos" label="Obteniendo..." icon="pi pi-spin pi-spinner"
                            disabled />
                    </div>
                </div>

                <template v-if="examenElectrolitos">
                    <div class="data-wrapper">
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Calcio: </strong> {{ examenElectrolitos.calcio }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Sodio: </strong> {{ examenElectrolitos.sodio }}</p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Potasio: </strong> {{ examenElectrolitos.potasio }}
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="data-section">
                            <div class="grid">
                                <div class="col md:col-4">
                                    <p><strong>Cloro: </strong> {{
                                        examenElectrolitos.cloro }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Fosforo: </strong> {{
                                        examenElectrolitos.fosforo }}
                                    </p>
                                </div>
                                <div class="col md:col-4">
                                    <p><strong>Magenesio: </strong> {{
                                        examenElectrolitos.magnesio }}
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>

            </AccordionTab>
            <AccordionTab header="Imagenología">
                <div v-for="(imagenologia, categoryName) in imagenologias" :key="categoryName" class="pt-4">
                    <div class="grid">
                        <div class="col md:col-4 pt-3 text-lg">{{ categoryName }}</div>
                        <div class="col md:col-4"></div>
                        <div class="col md:col-4">
                            <Button v-if="!selectedCategories.includes(categoryName)"
                                :label="loadingCategories[categoryName] ? 'Obteniendo' : 'Realizar'"
                                @click="realizarCategoria(categoryName)" :disabled="loadingCategories[categoryName]" />
                        </div>
                    </div>
                    <div v-if="selectedCategories.includes(categoryName)" class="card text-center">
                        <Image :src="imagenologia.path" alt="" width="250" preview />
                        <p>Interpretación: {{ imagenologia.interpretacion }}</p>
                    </div>
                </div>
            </AccordionTab>
        </Accordion>

        <div class="grid pt-4">
            <div class="col md:col-9"></div>
            <div class="col md:col-3">
                <Button label="Ok" @click="closeDialog" icon="pi pi-check" />
            </div>
        </div>
    </Dialog>
</template>



<style scoped>
.gestion-title {
    font-size: 2em;
    font-weight: bold;
    color: #bb86fc;
}

.total-casos {
    font-size: 1.3em;
    font-weight: bold;
    color: #e0e0e0;
}

.info-data,
.case-data {
    font-size: 1em;
    color: #fff9e3;
}

.info-data-dialog {
    font-size: 1.2em;
    color: #cfcfcf;
}

.case-data {
    font-weight: normal;
    padding-bottom: 0.5em;
}

.info-data {
    font-weight: bold;
    padding-bottom: 0.3em;
}

.month-name {
    font-size: 1.1em;
    font-weight: bold;
    color: #bb86fc;
    margin-bottom: 0.3em;
}

.datos-paciente {
    font-size: 1.4em;
    font-weight: bold;
    color: #bb86fc;
    margin-bottom: 0.3em;
}

.data-section {
    padding: 2px 0;
    border-bottom: 1px solid #444;
    margin: 0 10px;
}

.data-section:last-child {
    border-bottom: none;
}

h5 {
    margin: 0;
    padding: 2px 0;
}

.data-text {
    font-size: 0.85em;
    color: #b0b0b0;
}

.card-mes:hover {
    background-color: #333;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

.data-section-main {
    padding: 2px 0;
    border-bottom: 1px solid #444;
}

.examen-titulo {
    color: #bb86fc;
}
</style>















aquiiiii




<!-- eslint-disable vue/multi-word-component-names -->
<script setup>
import { ref, onMounted } from 'vue';
import { useToast } from 'primevue/usetoast';
import { useRouter } from 'vue-router';
import { useStore } from 'vuex';
import { obtenerAnalisis } from '@/services/historiaService';
import { registrarAccion } from '@/services/simulacionService';

const display = ref(true);
const position = ref('right');
const toast = useToast();
const router = useRouter();
const store = useStore();
const laboratorios = ref({});
const subanalisisVisibilidad = ref({});
const loading = ref({});
const idSimulacion = localStorage.getItem('id_simulacion');

onMounted(() => {
    fetchLaboratorios();
    const realizados = store.getters['laboratorios/laboratoriosRealizados'];
    Object.keys(realizados).forEach(categoria => {
        subanalisisVisibilidad.value[categoria] = true;
    });
});

async function fetchLaboratorios() {
    try {
        const response = await obtenerAnalisis(localStorage.getItem('id_historia_clinica')); // Suponiendo que el id de historia clínica está en el localStorage
        laboratorios.value = response.data;
    } catch (error) {
        toast.add({ severity: 'error', summary: 'Error', detail: 'No se pudieron obtener los laboratorios', life: 3000 });
    }
}

function toggleSubanalisis(categoria) {
    loading.value[categoria] = true;

    setTimeout(async () => {
        subanalisisVisibilidad.value[categoria] = true;


        const subanalisis = laboratorios.value[categoria].subanalisis;
        const puntaje = laboratorios.value[categoria].puntaje;
        const rubrica = laboratorios.value[categoria].rubrica;
        const feed = laboratorios.value[categoria].feed;
        store.dispatch('laboratorios/realizarLaboratorio', { categoria, subanalisis });

        const descripcion = `Se realizó el laboratorio de ${categoria}`;
        const accionData = {
            id_simulacion: idSimulacion,
            descripcion,
            tipo_accion: rubrica,
            puntaje,
            retroalimentacion: feed,
        };
        try {
            await registrarAccion(accionData);
            toast.add({ severity: 'success', summary: 'Acción registrada', detail: `Se registró la acción para ${categoria}`, life: 3000 });
        } catch (error) {
            toast.add({ severity: 'error', summary: 'Error', detail: 'No se pudo registrar la acción', life: 3000 });
        }

        loading.value[categoria] = false;
    }, 2000);
}

function closeDialog() {
    display.value = false;
    router.push('/app');
}
</script>


<template>
    <Dialog header="Investigar" v-model:visible="display" :style="{ width: '45vw', height: '100%' }" :modal="true"
        @hide="closeDialog" class="p-fluid" :position="position" :draggable="false">
        <Accordion>
            <AccordionTab header="Laboratorios Disponibles">
                <div v-for="(laboratorio, categoria) in laboratorios" :key="categoria" class="grid p-fluid mb-4">
                    <div class="col md:col-8">
                        <h6>{{ categoria }}</h6>
                    </div>
                    <div class="col md:col-4">
                        <!-- Mostrar el botón solo si los subanálisis no están visibles -->
                        <Button v-if="!subanalisisVisibilidad[categoria] && !loading[categoria]" label="Realizar"
                            @click="toggleSubanalisis(categoria)" />
                        <!-- Mostrar el ícono de carga mientras espera los 2 segundos -->
                        <Button v-else-if="loading[categoria]" label="Obteniendo..." icon="pi pi-spin pi-spinner"
                            disabled />
                    </div>
                    <!-- Mostrar los subanálisis cuando se carguen -->
                    <div v-if="subanalisisVisibilidad[categoria]" class="col-12">
                        <div v-for="subanalisis in laboratorio.subanalisis" :key="subanalisis.nombre" class="mb-2">
                            <div class="grid">
                                <div class="col md:col-6"><strong>{{ subanalisis.nombre }}: </strong></div>
                                <div class="col md:col-6">{{ subanalisis.resultado }}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </AccordionTab>
        </Accordion>

        <!-- Botón para cerrar el diálogo -->
        <div class="grid pt-4">
            <div class="col md:col-9"></div>
            <div class="col md:col-3">
                <Button label="Ok" @click="closeDialog" icon="pi pi-check" />
            </div>
        </div>
    </Dialog>
</template>




<style scoped>
.gestion-title {
    font-size: 2em;
    font-weight: bold;
    color: #bb86fc;
}

.total-casos {
    font-size: 1.3em;
    font-weight: bold;
    color: #e0e0e0;
}

.info-data,
.case-data {
    font-size: 1em;
    color: #fff9e3;
}

.info-data-dialog {
    font-size: 1.2em;
    color: #cfcfcf;
}

.case-data {
    font-weight: normal;
    padding-bottom: 0.5em;
}

.info-data {
    font-weight: bold;
    padding-bottom: 0.3em;
}

.month-name {
    font-size: 1.1em;
    font-weight: bold;
    color: #bb86fc;
    margin-bottom: 0.3em;
}

.datos-paciente {
    font-size: 1.4em;
    font-weight: bold;
    color: #bb86fc;
    margin-bottom: 0.3em;
}

.data-section {
    padding: 2px 0;
    border-bottom: 1px solid #444;
    margin: 0 10px;
}

.data-section:last-child {
    border-bottom: none;
}

h5 {
    margin: 0;
    padding: 2px 0;
}

.data-text {
    font-size: 0.85em;
    color: #b0b0b0;
}

.card-mes:hover {
    background-color: #333;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

.data-section-main {
    padding: 2px 0;
    border-bottom: 1px solid #444;
}

.examen-titulo {
    color: #bb86fc;
}
</style>